{"uid":"e1c263542abac866","name":"CrossChain USDC BSC(普通账户)-MATIC(普通账户)","fullName":"Testcase.Test_Cloud.Test_Cross_Chain.Test_External_safe.test_cross_chain_success.Test_transfers_success#test_custodial","historyId":"a6daea32b2bf103ab73b083c7c539968","time":{"start":1675664966735,"stop":1675664969277,"duration":2542},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <test_cross_chain_success.Test_transfers_success object at 0x108ba1190>\ntest_title = 'CrossChain USDC BSC(普通账户)-MATIC(普通账户)'\nprivatekey = '100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'\nfromaddress = '0x9b532cf5F662e51ba643672797Ad3eC1A60bb939', networkCode = 'BSC', symbol = 'USDC'\ntoaddress = '0x66c1d34c273cc09df9072f49aeba4b09e017bc5c', toNetworkCode = 'MATIC', amount = '13'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,fromaddress,networkCode,symbol,toaddress,toNetworkCode,amount', test_data)\n    def test_custodial(self,test_title,privatekey,fromaddress,networkCode,symbol,toaddress,toNetworkCode,amount):\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=fromaddress)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"CROSS_CHAIN\",\n                \"body\":{\n                    \"from\":fromaddress,\n                    \"to\":toaddress,\n                    \"symbol\":symbol,\n                    \"amount\":amount,\n                    \"toNetworkCode\":toNetworkCode\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n>           assert transfer.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Cross_Chain/Test_External_safe/test_cross_chain_success.py:58: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <test_cross_chain_success.Test_transfers_success object at 0x108ba1190>\ntest_title = 'CrossChain USDC BSC(普通账户)-MATIC(普通账户)'\nprivatekey = '100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'\nfromaddress = '0x9b532cf5F662e51ba643672797Ad3eC1A60bb939', networkCode = 'BSC', symbol = 'USDC'\ntoaddress = '0x66c1d34c273cc09df9072f49aeba4b09e017bc5c', toNetworkCode = 'MATIC', amount = '13'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,fromaddress,networkCode,symbol,toaddress,toNetworkCode,amount', test_data)\n    def test_custodial(self,test_title,privatekey,fromaddress,networkCode,symbol,toaddress,toNetworkCode,amount):\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=fromaddress)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"CROSS_CHAIN\",\n                \"body\":{\n                    \"from\":fromaddress,\n                    \"to\":toaddress,\n                    \"symbol\":symbol,\n                    \"amount\":amount,\n                    \"toNetworkCode\":toNetworkCode\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n>           assert transfer.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Cross_Chain/Test_External_safe/test_cross_chain_success.py:58: AssertionError","steps":[{"name":"查询from账户holder信息","time":{"start":1675664966735,"stop":1675664967363,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"构建交易——instructions","time":{"start":1675664967363,"stop":1675664969276,"duration":1913},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Cross_Chain/Test_External_safe/test_cross_chain_success.py\", line 58, in test_custodial\n    assert transfer.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"1ba360720ecc87f","name":"log","source":"1ba360720ecc87f.txt","type":"text/plain","size":1769}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"Custodial Transfers Success!"},{"name":"feature","value":"Transfers Success!"},{"name":"parentSuite","value":"Testcase.Test_Cloud.Test_Cross_Chain.Test_External_safe"},{"name":"suite","value":"test_cross_chain_success"},{"name":"subSuite","value":"Test_transfers_success"},{"name":"host","value":"lilongdeMacBook-Pro.local"},{"name":"thread","value":"26390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Testcase.Test_Cloud.Test_Cross_Chain.Test_External_safe.test_cross_chain_success"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"'13'"},{"name":"fromaddress","value":"'0x9b532cf5F662e51ba643672797Ad3eC1A60bb939'"},{"name":"networkCode","value":"'BSC'"},{"name":"privatekey","value":"'100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'"},{"name":"symbol","value":"'USDC'"},{"name":"test_title","value":"'CrossChain USDC BSC(普通账户)-MATIC(普通账户)'"},{"name":"toNetworkCode","value":"'MATIC'"},{"name":"toaddress","value":"'0x66c1d34c273cc09df9072f49aeba4b09e017bc5c'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e1c263542abac866.json","parameterValues":["'13'","'0x9b532cf5F662e51ba643672797Ad3eC1A60bb939'","'BSC'","'100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'","'USDC'","'CrossChain USDC BSC(普通账户)-MATIC(普通账户)'","'MATIC'","'0x66c1d34c273cc09df9072f49aeba4b09e017bc5c'"]}