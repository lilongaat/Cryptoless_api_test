{"name": "Custodial账户IRIS质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 0\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_fail_send.Test_stake_fail object at 0x1111b5670>, test_title = 'Custodial账户IRIS质押', networkCode = 'CLV', symbol = 'CLV'\ntype = 'stake', address = '5Hgu6xq1ETv3kbjBnhqZCzaDFtqUhxfFBogZuJ2RnqsoXmWk', amount = '0.000005', status_check = 0, code_check = 2400000\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,address,amount,status_check,code_check', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,type,address,amount,status_check,code_check):\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                }\n            else:\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n            assert stake.status_code == 200\n            assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SIGNED\"\n    \n            id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n>           assert send.status_code == status_check\nE           assert 400 == 0\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Instructions/Test_Stake/Test_Custodial/test_fail_send.py:63: AssertionError"}, "steps": [{"name": "构建交易——instructions", "status": "passed", "start": 1668149465366, "stop": 1668149471234}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 0\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_Custodial/test_fail_send.py\", line 63, in test_custodial\n    assert send.status_code == status_check\n"}, "start": 1668149471234, "stop": 1668149471932}], "attachments": [{"name": "log", "source": "cbef9f50-5065-4a8c-80f5-52cc077e1c71-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Custodial账户IRIS质押'"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'5Hgu6xq1ETv3kbjBnhqZCzaDFtqUhxfFBogZuJ2RnqsoXmWk'"}, {"name": "amount", "value": "'0.000005'"}, {"name": "status_check", "value": "0"}, {"name": "code_check", "value": "2400000"}], "start": 1668149465366, "stop": 1668149471932, "uuid": "99445efc-8054-496d-a42d-13a4d3ba3c95", "historyId": "1a170e2b4bd9c0e6430f2fb7eec5d690", "testCaseId": "be3100f8b8376e5e2d1e0aadbd9fcf0e", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_fail_send.Test_stake_fail#test_custodial", "labels": [{"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "feature", "value": "Stake_Fail!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial"}, {"name": "suite", "value": "test_fail_send"}, {"name": "subSuite", "value": "Test_stake_fail"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "25145-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_fail_send"}]}