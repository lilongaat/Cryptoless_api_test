{"name": "DOGE Custodial账户转账", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success.Test_transfers_success object at 0x110ba0e20>, test_title = 'DOGE Custodial账户转账'\nnetworkCode = 'DOGE', symbol = 'DOGE', from_add = 'D9vakMz4cLhRXjjQyhSxMX7Wg3xmoFMeQ6'\nto_add = 'D9HfYYym4Ca49VE9FTTvmucCcyHTPspA3j', amount = '0.09'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            if networkCode == \"BTC\":\n                pass\n            elif networkCode == \"DOGE\":\n                response = Httpexplore.DOGE.balance(from_add)\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()))\n            elif networkCode == \"ETH\":\n                pass\n            elif networkCode == \"BSC\":\n                if symbol == \"BNB\":\n                    response = Httpexplore.BSC.balance(from_add)\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n                else:\n                    response = Httpexplore.BSC.balance_erc20(from_add,\"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\")\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            elif networkCode == \"MATIC\":\n                if symbol == \"MATIC\":\n                    response = Httpexplore.MATIC.balance(from_add)\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n                else:\n                    response = Httpexplore.MATIC.balance_erc20(from_add,\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\")\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**6)\n            elif networkCode == \"ATOM\":\n                response = Httpexplore.ATOM.balance(from_add)\n                assert response.status_code == 200\n                balance_ = [b.get(\"amount\") for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uatom\"]\n                balance = (Decimal(int(balance_[0]))/Decimal(10**6))\n            elif networkCode == \"IRIS\":\n                response = Httpexplore.IRIS.balance(from_add)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\n                balance = Decimal(balance_detail[\"amount\"])/Decimal(10**6)\n            elif networkCode == \"CLV\":\n                response = Httpexplore.CLV.balance(from_add)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\n                balance = (Decimal(balance_detail[\"balance\"]) - Decimal(balance_detail[\"lock\"]) - Decimal(balance_detail[\"reserved\"]))/Decimal(10**18)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNED\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n>           assert send.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Transfer/Test_Custodial/test_success.py:130: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672825673608, "stop": 1672825674474}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672825674474, "stop": 1672825674570}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672825674571, "stop": 1672825674571}, {"name": "构建交易——instructions", "status": "passed", "start": 1672825674571, "stop": 1672825676528}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Custodial/test_success.py\", line 130, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1672825676528, "stop": 1672825677032}], "attachments": [{"name": "log", "source": "d4cd523f-4c3b-47d2-843a-59cb6762b151-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'DOGE Custodial账户转账'"}, {"name": "networkCode", "value": "'DOGE'"}, {"name": "symbol", "value": "'DOGE'"}, {"name": "from_add", "value": "'D9vakMz4cLhRXjjQyhSxMX7Wg3xmoFMeQ6'"}, {"name": "to_add", "value": "'D9HfYYym4Ca49VE9FTTvmucCcyHTPspA3j'"}, {"name": "amount", "value": "'0.09'"}], "start": 1672825673608, "stop": 1672825677033, "uuid": "5176965a-86f6-48de-b9b8-74a6050f8616", "historyId": "5beefd033398af1e330a2254fbcdd483", "testCaseId": "19b7a47abb98a457c189c4a8c9ed58a8", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Custodial.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Custodial"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6283-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Custodial.test_success"}]}