{"name": "正常SWAP(MATIC-USDC)", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success.Test_swap_success object at 0x10de0d970>, test_title = '正常SWAP(MATIC-USDC)'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'], networkCode = 'MATIC', from_coin = 'MATIC'\nto_coin = 'USDC', address = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', slippage = '1', fromAmount = '0.0009'\n\n    @allure.story(\"External_Swap_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,from_coin,to_coin,address,slippage,fromAmount', test_data)\n    def test_external(self,test_title,privatekey,networkCode,from_coin,to_coin,address,slippage,fromAmount):\n    \n        with allure.step(\"查询账户from_coin holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,from_coin,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户to_coin holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,to_coin,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"from\":from_coin,\n                \"to\":to_coin,\n                \"address\":address,\n                \"fromAmount\":fromAmount,\n                \"slippage\":slippage\n            }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            transfer = Http.HttpUtils.instructions(\"swap\",body,networkCode,[],transactionParams)\n    \n            assert transfer.status_code == 200\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = transfer.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——instructions\"):\n            sign = Http.HttpUtils.sign(id,signatures,serialized)\n            assert sign.status_code == 200\n            assert sign.json()[\"status\"] == \"SIGNED\"\n    \n        with allure.step(\"签名交易——instructions\"):\n            sign = Http.HttpUtils.sign(id,signatures,serialized)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Instructions/Test_Swap/Test_External/test_success.py:90: AssertionError"}, "steps": [{"name": "查询账户from_coin holders信息——holders", "status": "passed", "start": 1668160983894, "stop": 1668160984293}, {"name": "查询账户to_coin holders信息——holders", "status": "passed", "start": 1668160984293, "stop": 1668160984576}, {"name": "构建交易——instructions", "status": "passed", "start": 1668160984576, "stop": 1668160989506}, {"name": "签名交易——instructions", "status": "passed", "start": 1668160989506, "stop": 1668160989917}, {"name": "签名交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Swap/Test_External/test_success.py\", line 90, in test_external\n    assert sign.status_code == 200\n"}, "start": 1668160989917, "stop": 1668160990167}], "attachments": [{"name": "log", "source": "e7e39d1b-904e-46d4-b6ee-b518f7b20eb7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常SWAP(MATIC-USDC)'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "from_coin", "value": "'MATIC'"}, {"name": "to_coin", "value": "'USDC'"}, {"name": "address", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "slippage", "value": "'1'"}, {"name": "fromAmount", "value": "'0.0009'"}], "start": 1668160983894, "stop": 1668160990167, "uuid": "4fb70060-e5ba-46c9-a50c-a77bd2756b42", "historyId": "d5b82ed41d2fd94a41ce157720dc6115", "testCaseId": "13d45453e4175d5ce7c5592ce4e7f4fc", "fullName": "Testcase.Test_Instructions.Test_Swap.Test_External.test_success.Test_swap_success#test_external", "labels": [{"name": "story", "value": "External_Swap_Success!"}, {"name": "feature", "value": "Swap_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Swap.Test_External"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_swap_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "27499-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Swap.Test_External.test_success"}]}