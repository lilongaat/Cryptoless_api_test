{"name": "GOERLI 多safe账户构建+签名交易后同时广播", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.00214061575257856') == Decimal('0.00268419027961443')", "trace": "self = <Test_Relay_Nonce.Test_transfers_success object at 0x10a19cf40>, test_title = 'GOERLI 多safe账户构建+签名交易后同时广播'\nnetworkCode = 'GOERLI', symbol = 'GoerliETH'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_adds = ['0xf4c4b7803447dc6d3a00ed765e10fdb1bfa1ec23', '0xacd5c6a98407469856b47d333309ed814fc64ebe', '0x1dc8b303498e3fe1b4cc6f5ecf3b2976eaceae36', '0x79f255cec4b987a4b4fd10858bc815a3b6134006', '0x2bf894ab121035107337049d16ce793f161979a0']\nfrom_other = '0xa491f7d4d19c4e3907910be05f19e78fbd97412b', to_add = '0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650'\namount = '0.00000003'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_adds,from_other,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_adds,from_other,to_add,amount):\n    \n        ids = []\n        hashs = []\n        for n in range(len(from_adds)):\n    \n            with allure.step(\"浏览器查询from账户balance信息\"):\n                balance = Httpexplore.Balances_explore.query(networkCode,from_adds[n],symbol)\n    \n            with allure.step(\"查询from账户holder信息\"):\n                holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_adds[n])\n                assert holder.status_code ==200\n                quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n            logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n            logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n            with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n                assert balance == quantity\n    \n            with allure.step(\"构建交易——instructions\"):\n                body = {\n                    \"networkCode\":networkCode,\n                    \"type\":\"transfer\",\n                    \"body\":{\n                        \"from\":from_adds[n],\n                        \"to\":to_add,\n                        \"symbol\":symbol,\n                        \"amount\":amount\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n                transfer = Http.HttpUtils.instructions(body)\n                assert transfer.status_code == 200\n                # assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNING\"\n    \n                id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n                requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n                signatures = []\n                for i in range(len(requiredSignings)):\n                    hash = requiredSignings[i][\"hash\"]\n                    publickey = requiredSignings[i][\"publicKeys\"][0]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                    }\n                    signatures.append(signature)\n    \n            with allure.step(\"签名交易\"):\n                sign  =Http.HttpUtils.sign(id,signatures)\n                assert sign.status_code == 200\n                ids.append(id)\n    \n        logger.debug(ids)\n    \n        if len(from_other) == 0:\n            pass\n        else:\n            with allure.step(\"构建交易——instructions\"):\n                body = {\n                    \"networkCode\":networkCode,\n                    \"type\":\"transfer\",\n                    \"body\":{\n                        \"from\":from_other,\n                        \"to\":to_add,\n                        \"symbol\":symbol,\n                        \"amount\":amount\n                    }\n                }\n                transfer = Http.HttpUtils.instructions(body)\n                assert transfer.status_code == 200\n                assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNING\"\n    \n                id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n                requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n                signatures = []\n                for i in range(len(requiredSignings)):\n                    hash = requiredSignings[i][\"hash\"]\n                    publickey = requiredSignings[i][\"publicKeys\"][0]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                    }\n                    signatures.append(signature)\n    \n            with allure.step(\"签名交易\"):\n                sign  =Http.HttpUtils.sign(id,signatures)\n                assert sign.status_code == 200\n    \n            with allure.step(\"广播交易\"):\n                send = Http.HttpUtils.send(id)\n                assert send.status_code == 200\n                assert send.json()[\"statusDesc\"] == \"PENDING\"\n    \n                hash = send.json()[\"hash\"]\n    \n        for m in range(len(ids)):\n            with allure.step(\"广播交易\"):\n                send = Http.HttpUtils.send(ids[m])\n                assert send.status_code == 200\n                assert send.json()[\"statusDesc\"] == \"PENDING\"\n    \n                hash = send.json()[\"hash\"]\n                hashs.append(hash)\n    \n        logger.debug(hashs)\n    \n        for i in range(len(ids)):\n            with allure.step(\"通过id查询交易记录\"):\n                sleep(30)\n                for n in range(10):\n                    transaction = Http.HttpUtils.transactions_byid(ids[i])\n                    assert transaction.status_code == 200\n                    statusDesc = transaction.json()[\"statusDesc\"]\n                    if statusDesc == \"SETTLED\" and len(transaction.json()[\"balanceChanges\"]) > 0:\n                        break\n                    else:\n                        sleep(30)\n                sleep(5)\n    \n        for j in range(len(from_adds)):\n            with allure.step(\"浏览器查询from账户balance信息\"):\n                balance = Httpexplore.Balances_explore.query(networkCode,from_adds[j],symbol)\n    \n            with allure.step(\"查询from账户holder信息\"):\n                holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_adds[j])\n                assert holder.status_code ==200\n                quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n            logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n            logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n            with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n>               assert balance == quantity\nE               AssertionError: assert Decimal('0.00214061575257856') == Decimal('0.00268419027961443')\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/Test_Relay_Nonce.py:178: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672999861554, "stop": 1672999862140}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672999862140, "stop": 1672999862550}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672999862551, "stop": 1672999862551}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999862551, "stop": 1672999873937}, {"name": "签名交易", "status": "passed", "start": 1672999873937, "stop": 1672999878423}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672999878423, "stop": 1672999878839}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672999878839, "stop": 1672999879166}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672999879166, "stop": 1672999879166}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999879166, "stop": 1672999888150}, {"name": "签名交易", "status": "passed", "start": 1672999888150, "stop": 1672999892148}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672999892149, "stop": 1672999892655}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672999892655, "stop": 1672999893066}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672999893067, "stop": 1672999893067}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999893067, "stop": 1672999903450}, {"name": "签名交易", "status": "passed", "start": 1672999903450, "stop": 1672999907606}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672999907606, "stop": 1672999908016}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672999908016, "stop": 1672999908323}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672999908323, "stop": 1672999908323}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999908323, "stop": 1672999918257}, {"name": "签名交易", "status": "passed", "start": 1672999918257, "stop": 1672999922046}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672999922046, "stop": 1672999922462}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672999922462, "stop": 1672999922864}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672999922865, "stop": 1672999922865}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999922865, "stop": 1672999932687}, {"name": "签名交易", "status": "passed", "start": 1672999932687, "stop": 1672999936689}, {"name": "构建交易——instructions", "status": "passed", "start": 1672999936689, "stop": 1672999947645}, {"name": "签名交易", "status": "passed", "start": 1672999947645, "stop": 1672999951435}, {"name": "广播交易", "status": "passed", "start": 1672999951435, "stop": 1672999954099}, {"name": "广播交易", "status": "passed", "start": 1672999954099, "stop": 1672999960252}, {"name": "广播交易", "status": "passed", "start": 1672999960252, "stop": 1672999964555}, {"name": "广播交易", "status": "passed", "start": 1672999964555, "stop": 1672999967616}, {"name": "广播交易", "status": "passed", "start": 1672999967616, "stop": 1672999971404}, {"name": "广播交易", "status": "passed", "start": 1672999971405, "stop": 1672999974373}, {"name": "通过id查询交易记录", "status": "passed", "start": 1672999974374, "stop": 1673000070625}, {"name": "通过id查询交易记录", "status": "passed", "start": 1673000070625, "stop": 1673000106059}, {"name": "通过id查询交易记录", "status": "passed", "start": 1673000106059, "stop": 1673000141481}, {"name": "通过id查询交易记录", "status": "passed", "start": 1673000141481, "stop": 1673000176789}, {"name": "通过id查询交易记录", "status": "passed", "start": 1673000176789, "stop": 1673000212245}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1673000212245, "stop": 1673000212666}, {"name": "查询from账户holder信息", "status": "passed", "start": 1673000212667, "stop": 1673000213184}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.00214061575257856') == Decimal('0.00268419027961443')\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Safe/Test_Relay_Nonce.py\", line 178, in test_custodial\n    assert balance == quantity\n"}, "start": 1673000213185, "stop": 1673000213185}], "attachments": [{"name": "log", "source": "e58cb58c-b83e-493d-9ee3-0e73ceb5d565-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI 多safe账户构建+签名交易后同时广播'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_adds", "value": "['0xf4c4b7803447dc6d3a00ed765e10fdb1bfa1ec23', '0xacd5c6a98407469856b47d333309ed814fc64ebe', '0x1dc8b303498e3fe1b4cc6f5ecf3b2976eaceae36', '0x79f255cec4b987a4b4fd10858bc815a3b6134006', '0x2bf894ab121035107337049d16ce793f161979a0']"}, {"name": "from_other", "value": "'0xa491f7d4d19c4e3907910be05f19e78fbd97412b'"}, {"name": "to_add", "value": "'0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650'"}, {"name": "amount", "value": "'0.00000003'"}], "start": 1672999861554, "stop": 1673000213189, "uuid": "6ddc01ff-9201-441d-8324-b22b69fda544", "historyId": "7e9b7bcbe54b1679657772540c23c3de", "testCaseId": "aefed52ddc727ea6f398e08d74f5e493", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_Relay_Nonce.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "Test_Relay_Nonce"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "16789-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_Relay_Nonce"}]}