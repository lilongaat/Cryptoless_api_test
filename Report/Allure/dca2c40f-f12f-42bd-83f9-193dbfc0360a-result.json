{"name": "CLV Custodial账户质押超过精度", "status": "failed", "statusDetails": {"message": "AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code", "trace": "self = <test_stake_custodial_fail.Test_stake_success object at 0x10509f550>, test_title = 'CLV Custodial账户质押超过精度'\nnetworkCode = 'CLV', symbol = 'CLV', type = 'stake', address = '5G8W1b7pWa7zzcYAWomTaX2zmP1SHE7JDEGvQTdGh45d83te'\namount = '0.000000001', status_code = 400, code = 2102001\n\n    @allure.story(\"Custodial Stake Fail!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,address,amount,status_code,code', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,type,address,amount,status_code,code):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,address,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=address)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n            del balance,quantity\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.staking(networkCode,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n            else:\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                        \"amount\":amount\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n    \n            stake = Http.HttpUtils.instructions(body)\n    \n>           assert stake.status_code == status_code\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\nTestcase/Test_Cloud/Test_Stake/Test_Custodial/test_stake_custodial_fail.py:116: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1675927903428, "stop": 1675927903895}, {"name": "查询from账户holder信息", "status": "passed", "start": 1675927903895, "stop": 1675927904366}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1675927904367, "stop": 1675927904367}, {"name": "查询账户staking信息", "status": "passed", "start": 1675927904367, "stop": 1675927904616}, {"name": "构建交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Stake/Test_Custodial/test_stake_custodial_fail.py\", line 116, in test_custodial\n    assert stake.status_code == status_code\n"}, "start": 1675927904616, "stop": 1675927909897}], "attachments": [{"name": "log", "source": "d33f242f-797f-49ae-883b-6b22bfca5f7e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'CLV Custodial账户质押超过精度'"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'5G8W1b7pWa7zzcYAWomTaX2zmP1SHE7JDEGvQTdGh45d83te'"}, {"name": "amount", "value": "'0.000000001'"}, {"name": "status_code", "value": "400"}, {"name": "code", "value": "2102001"}], "start": 1675927903428, "stop": 1675927909898, "uuid": "82f8299c-61cf-4a7a-96a4-a493fc860a85", "historyId": "354806049e57a3cf6d175e7fb8d41112", "testCaseId": "ac4e75e203c8633f0adfd84543a62515", "fullName": "Testcase.Test_Cloud.Test_Stake.Test_Custodial.test_stake_custodial_fail.Test_stake_success#test_custodial", "labels": [{"name": "feature", "value": "Stake!"}, {"name": "story", "value": "Custodial Stake Fail!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Stake.Test_Custodial"}, {"name": "suite", "value": "test_stake_custodial_fail"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "7406-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Stake.Test_Custodial.test_stake_custodial_fail"}]}