{"name": "正常SWAP(MATIC-USDC)", "status": "broken", "statusDetails": {"message": "Exception: 请求异常", "trace": "self = <test_fail_sign.Test_swap_fail object at 0x10e0f2d30>, test_title = '正常SWAP(MATIC-USDC)'\nprivatekey = ['0e7262525d4090224c33252906908ac9bbbcf51711261020c9eba35f6e76b508'], networkCode = 'MATIC', from_coin = 'MATIC'\nto_coin = 'USDC', address = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', slippage = '1', fromAmount = '0.0006', status_check = 400\ncode_check = 2300000\n\n    @allure.story(\"External Swap Sign Fail!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,from_coin,to_coin,address,slippage,fromAmount,status_check,code_check', test_data)\n    def test_external(self,test_title,privatekey,networkCode,from_coin,to_coin,address,slippage,fromAmount,status_check,code_check):\n    \n        with allure.step(\"查询账户from_coin holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,from_coin,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户to_coin holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,to_coin,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"from\":from_coin,\n                \"to\":to_coin,\n                \"address\":address,\n                \"fromAmount\":fromAmount,\n                \"slippage\":slippage\n            }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            transfer = Http.HttpUtils.instructions(\"swap\",body,networkCode,[],transactionParams)\n    \n            assert transfer.status_code == 200\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = transfer.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——instructions\"):\n>           sign = Http.HttpUtils.sign(id,signatures,serialized)\n\nTestcase/Test_Instructions/Test_Swap/Test_External/test_fail_sign.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nid = '1591005778525274114'\nsignatures = [{'hash': '4a00eb6b2e194d72aeff80bfbbd7b41b0146f554c7d0c11d2d6d6f32fb703bde', 'publicKey': '0244fb46bba2e912f26a73126b...8240fdcfd7390fc7e96e9d232ebb9598b76364dffccf59a7b241b8af7cf7f443b8bb96eaa4eccd0c1c2657a198eb02489e7b4311eb6873288a01'}]\nserialized = '02f902df81891c850735dac1008516dc82fabe8302c6d7941111111254fb6c44bac0bed2854e76f90643097d870221b262dd8000b902a87c02520...000000000000000000000000000000000000000221b262dd800000000000000000000000000000000000000000000000000000cfee7c08c0808080'\nAuthorization = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTg1MTAyNzkxNDY2NDg3ODEwIiwiZXhwIjoxNjk5NjAyNjg2LCJpYXQiOjE2NjgwNjY2ODYsInVzZXJJZCI6MTU4NTEwMjc5MTQ2NjQ4NzgxMH0.crnXQzc0JOD7wPow9R3P3-uZrJmzOeUF6WOqy5OhxqY'\n\n    @staticmethod\n    # sign\n    def sign(id: str, signatures: list, serialized: str, Authorization=token):\n        url = url_ + \"/vault/transactions/\" + id + \"/signatures\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": Authorization\n        }\n        body = {\n            \"signatures\":signatures,\n            \"serialized\": serialized\n        }\n        logger.info('\\n'+\"<-----Sign----->\"+\"\\n\"+\"Url:\"+url+'\\n\\n'+'Headers:'+json.dumps(headers)+'\\n\\n'+'Body:'+json.dumps(body))\n    \n        res = requests.post(url=url, json=body, headers=headers, timeout=timeout_)\n        if res.status_code == 200:\n            logger.info('\\n'+\"<-----Sign Response----->\"+\"\\n\"+(res.text))\n            return res\n        else:\n            logger.info('\\n'+\"<-----Sign Response Error----->\"+\"\\n\"+str(res.status_code)+\"\\n\"+(res.text))\n>           raise Exception(\"请求异常\")\nE           Exception: 请求异常\n\nCommon/Http.py:630: Exception"}, "steps": [{"name": "查询账户from_coin holders信息——holders", "status": "passed", "start": 1668160309467, "stop": 1668160309906}, {"name": "查询账户to_coin holders信息——holders", "status": "passed", "start": 1668160309906, "stop": 1668160310388}, {"name": "构建交易——instructions", "status": "passed", "start": 1668160310388, "stop": 1668160315225}, {"name": "签名交易——instructions", "status": "broken", "statusDetails": {"message": "Exception: 请求异常\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Swap/Test_External/test_fail_sign.py\", line 84, in test_external\n    sign = Http.HttpUtils.sign(id,signatures,serialized)\n  File \"/Users/lilong/Documents/Test_Api/Common/Http.py\", line 630, in sign\n    raise Exception(\"请求异常\")\n"}, "start": 1668160315225, "stop": 1668160315636}], "attachments": [{"name": "log", "source": "8ce3683e-b87b-429c-9ed4-df475a33f091-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常SWAP(MATIC-USDC)'"}, {"name": "privatekey", "value": "['0e7262525d4090224c33252906908ac9bbbcf51711261020c9eba35f6e76b508']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "from_coin", "value": "'MATIC'"}, {"name": "to_coin", "value": "'USDC'"}, {"name": "address", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "slippage", "value": "'1'"}, {"name": "fromAmount", "value": "'0.0006'"}, {"name": "status_check", "value": "400"}, {"name": "code_check", "value": "2300000"}], "start": 1668160309467, "stop": 1668160315639, "uuid": "0b1c605c-616d-4f2a-a544-de0593e40249", "historyId": "99e76c314aced4b407974d696aa8cfd0", "testCaseId": "e022941fa9f80a9205ba77b3bbad443f", "fullName": "Testcase.Test_Instructions.Test_Swap.Test_External.test_fail_sign.Test_swap_fail#test_external", "labels": [{"name": "story", "value": "External Swap Sign Fail!"}, {"name": "feature", "value": "Swap Fail!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Swap.Test_External"}, {"name": "suite", "value": "test_fail_sign"}, {"name": "subSuite", "value": "Test_swap_fail"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "27202-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Swap.Test_External.test_fail_sign"}]}