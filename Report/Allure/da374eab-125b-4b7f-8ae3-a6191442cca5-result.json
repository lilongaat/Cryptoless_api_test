{"name": "创建安全账户+payer激活", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not builtin_function_or_method", "trace": "self = <test_create_success.Test_create_safe_account object at 0x110dee760>, test_title = '创建安全账户+payer激活'\nname = '安全账户MATIC2-2-1667985631'\npayer_prv = ['4d87c72cee9d4b257368f448f4f7406d0ce98947eb30fcaa8194319303534b13', '9ff56ed61c94b8af33481f27826ae574adfa2a9640d9e68b7115594fb16934e0']\npayer_pub = ['02e5230ff44191de07476a79c8908374bec9cb7eefb4218513379b0450cd0e381d', '022c8955ff17013456fd8b268afcc28dc091e65c6f217b5138d3b4d585924d7dda']\nPublicKeys = ['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', ''], networkCode = 'MATIC'\n\n    @allure.story(\"Create Safe Account Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,name,payer_prv,payer_pub,PublicKeys,networkCode', test_data)\n    def test_create_account_safe(self, test_title, name, payer_prv, payer_pub, PublicKeys, networkCode):\n    \n        with allure.step(\"创建安全账户\"):\n            safe_account = Http.HttpUtils.create_safe_account(name,networkCode,PublicKeys[0],PublicKeys[1])\n            assert safe_account.status_code == 200\n            assert safe_account.json()[\"status\"] == \"inactive\"\n            id = safe_account.json()[\"id\"]\n            address = safe_account.json()[\"address\"]\n    \n        with allure.step(\"查询账户byid\"):\n            account_detail = Http.HttpUtils.get_account_byid(id)\n            assert account_detail.status_code == 200\n            assert account_detail.json()[\"address\"] == address\n            assert account_detail.json()[\"status\"] == \"inactive\"\n    \n        with allure.step(\"payer1创建激活安全账户交易\"):\n            activation1_safe_account = Http.HttpUtils.activation_safe_account(id,payer_pub[0])\n            assert activation1_safe_account.status_code == 200\n    \n            id1 = activation1_safe_account.json()[\"transaction\"][\"id\"]\n            hash1 = activation1_safe_account.json()[\"transaction\"][\"requiredSignings\"][0][\"hash\"]\n            publickey1 = activation1_safe_account.json()[\"transaction\"][\"requiredSignings\"][0][\"publicKeys\"][0]\n            signatures1 = {\n                    \"hash\":hash1,\n                    \"publicKey\":publickey1,\n>                   \"signature\":Conf.Config.sign(payer_prv[0],hash)\n    \n                }\n\nTestcase/Test_Account/Test_Safe_Account/test_create_success.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nprivkey_str = '4d87c72cee9d4b257368f448f4f7406d0ce98947eb30fcaa8194319303534b13', hash_str = <built-in function hash>\n\n    @staticmethod\n    # sign\n    def sign(privkey_str: str, hash_str: str):\n        privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n>       msg = bytes(bytearray.fromhex(hash_str))\nE       TypeError: fromhex() argument must be str, not builtin_function_or_method\n\nCommon/Conf.py:81: TypeError"}, "steps": [{"name": "创建安全账户", "status": "passed", "start": 1667985631346, "stop": 1667985636586}, {"name": "查询账户byid", "status": "passed", "start": 1667985636586, "stop": 1667985636924}, {"name": "payer1创建激活安全账户交易", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not builtin_function_or_method\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Account/Test_Safe_Account/test_create_success.py\", line 51, in test_create_account_safe\n    \"signature\":Conf.Config.sign(payer_prv[0],hash)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 81, in sign\n    msg = bytes(bytearray.fromhex(hash_str))\n"}, "start": 1667985636925, "stop": 1667985638807}], "attachments": [{"name": "log", "source": "1c586110-e4e6-481a-a037-3e7a9160df5b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'创建安全账户+payer激活'"}, {"name": "name", "value": "'安全账户MATIC2-2-1667985631'"}, {"name": "payer_prv", "value": "['4d87c72cee9d4b257368f448f4f7406d0ce98947eb30fcaa8194319303534b13', '9ff56ed61c94b8af33481f27826ae574adfa2a9640d9e68b7115594fb16934e0']"}, {"name": "payer_pub", "value": "['02e5230ff44191de07476a79c8908374bec9cb7eefb4218513379b0450cd0e381d', '022c8955ff17013456fd8b268afcc28dc091e65c6f217b5138d3b4d585924d7dda']"}, {"name": "PublicKeys", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '']"}, {"name": "networkCode", "value": "'MATIC'"}], "start": 1667985631346, "stop": 1667985638809, "uuid": "85c4afde-a9c3-4e23-8c73-4a90760b6641", "historyId": "3adeec47efb8fac4bd8b17df5c5268ce", "testCaseId": "92c4dc8ca13a5bfecbfc89a8df792e60", "fullName": "Testcase.Test_Account.Test_Safe_Account.test_create_success.Test_create_safe_account#test_create_account_safe", "labels": [{"name": "feature", "value": "Create Safe Account!"}, {"name": "story", "value": "Create Safe Account Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Account.Test_Safe_Account"}, {"name": "suite", "value": "test_create_success"}, {"name": "subSuite", "value": "Test_create_safe_account"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "13500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Account.Test_Safe_Account.test_create_success"}]}