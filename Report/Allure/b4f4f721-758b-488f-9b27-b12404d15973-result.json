{"name": "ATOM External账户质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNING' == 'BUILDING'\n  - BUILDING\n  + SIGNING", "trace": "self = <test_success.Test_stake_success object at 0x105dfb160>, test_title = 'ATOM External账户质押'\nnetworkCode = 'ATOM', symbol = 'ATOM', type = 'stake'\nprivatekey = '4b49226b1669a687fb4f8479fa9048f1cbb79af74529a47bae7a0c07ce97f8c6'\naddress = 'cosmos1gkcgpprzv4wkjteteynjr6l7hpq2xkxuuz0ulm', amount = '0.0005'\n\n    @allure.story(\"External_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,privatekey,address,amount', test_data)\n    def test_External(self,test_title,networkCode,symbol,type,privatekey,address,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,address,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=address)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.staking(networkCode,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n            else:\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                        \"amount\":amount\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n    \n            stake = Http.HttpUtils.instructions(body)\n    \n            assert stake.status_code == 200\n>           assert stake.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\nE           AssertionError: assert 'SIGNING' == 'BUILDING'\nE             - BUILDING\nE             + SIGNING\n\nTestcase/Test_Cloud/Stake/Safe/test_success.py:106: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672983985478, "stop": 1672983991777}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672983991777, "stop": 1672983991870}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672983991871, "stop": 1672983991871}, {"name": "查询账户staking信息", "status": "passed", "start": 1672983991871, "stop": 1672983998742}, {"name": "构建交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNING' == 'BUILDING'\n  - BUILDING\n  + SIGNING\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Stake/Safe/test_success.py\", line 106, in test_External\n    assert stake.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n"}, "start": 1672983998742, "stop": 1672984000948}], "attachments": [{"name": "log", "source": "52d00198-454c-4e5e-90f5-fa231d2dc217-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'ATOM External账户质押'"}, {"name": "networkCode", "value": "'ATOM'"}, {"name": "symbol", "value": "'ATOM'"}, {"name": "type", "value": "'stake'"}, {"name": "privatekey", "value": "'4b49226b1669a687fb4f8479fa9048f1cbb79af74529a47bae7a0c07ce97f8c6'"}, {"name": "address", "value": "'cosmos1gkcgpprzv4wkjteteynjr6l7hpq2xkxuuz0ulm'"}, {"name": "amount", "value": "'0.0005'"}], "start": 1672983985478, "stop": 1672984000948, "uuid": "ea778891-9dc2-4ed6-b981-81deda2bc61e", "historyId": "e2909a6b36d8f78460f982a7f824f4c1", "testCaseId": "b4bdb57ba4995d41aece672969e070a7", "fullName": "Testcase.Test_Cloud.Stake.Safe.test_success.Test_stake_success#test_External", "labels": [{"name": "story", "value": "External_Stake_Success!"}, {"name": "feature", "value": "Stake Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Stake.Safe"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "14146-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Stake.Safe.test_success"}]}