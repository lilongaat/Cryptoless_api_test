{"name": "GOERLI share账户转账 nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'SIGED'\n  - SIGED\n  + SIGNED\n  ?    +", "trace": "self = <test_sign_success.Test_transfers_success object at 0x10ecb46d0>, test_title = 'GOERLI share账户转账 nativecoin'\nnetworkCode = 'GOERLI', symbol = 'GoerliETH'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\nfrom_add = '0x24ca55d569ca99ae648949147ccb3e0024ec1098', to_add = '0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'\namount = '0.00012'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"查询账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickeys[0],\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"第一次签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n            assert sign.json()[\"statusDesc\"] == \"SIGNING\"\n    \n            requiredSignings = sign.json()[\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickeys[1],\n                    \"signature\":Conf.Config.sign(privatekey[1],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"第二次签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n>           assert sign.json()[\"statusDesc\"] == \"SIGED\"\nE           AssertionError: assert 'SIGNED' == 'SIGED'\nE             - SIGED\nE             + SIGNED\nE             ?    +\n\nTestcase/Test_Cloud/Test_Instructions/Test_Share/test_sign_success.py:94: AssertionError"}, "steps": [{"name": "查询账户holder信息", "status": "passed", "start": 1671017420974, "stop": 1671017421214}, {"name": "构建交易——instructions", "status": "passed", "start": 1671017421214, "stop": 1671017422116}, {"name": "第一次签名交易", "status": "passed", "start": 1671017422116, "stop": 1671017422327}, {"name": "第二次签名交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'SIGED'\n  - SIGED\n  + SIGNED\n  ?    +\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Instructions/Test_Share/test_sign_success.py\", line 94, in test_custodial\n    assert sign.json()[\"statusDesc\"] == \"SIGED\"\n"}, "start": 1671017422327, "stop": 1671017424407}], "attachments": [{"name": "log", "source": "c45f6b74-4e6c-4956-babb-9094de9a66c9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI share账户转账 nativecoin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "from_add", "value": "'0x24ca55d569ca99ae648949147ccb3e0024ec1098'"}, {"name": "to_add", "value": "'0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'"}, {"name": "amount", "value": "'0.00012'"}], "start": 1671017420974, "stop": 1671017424407, "uuid": "01d2a98f-4657-4337-8dc7-086ee3fe63dd", "historyId": "1dda67cbbe14555a94d6912d9a55333b", "testCaseId": "475df290959dcd54fbf4095bb7511864", "fullName": "Testcase.Test_Cloud.Test_Instructions.Test_Share.test_sign_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Instructions.Test_Share"}, {"name": "suite", "value": "test_sign_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "5814-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Instructions.Test_Share.test_sign_success"}]}