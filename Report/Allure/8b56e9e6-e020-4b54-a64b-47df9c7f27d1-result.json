{"name": "External账户CLVclaim", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success_sc.Test_stake_success object at 0x109883c70>, test_title = 'External账户CLVclaim'\nprivatekey = ['426a6690c29c5ee0052712c1fda0cc38691f3faf2a571f4b04c9705bbf3f921b'], networkCode = 'CLV', symbol = 'CLV', type = 'claim'\naddress = '5GF2XqzK1ERH6AGkyHz1jmMLMCVGBUEyRBxJb5TFWxhiS6EY', amount = 0\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,privatekey,networkCode,symbol,type,address,amount):\n    \n        with allure.step(\"查询账户holders信息\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                }\n            else:\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n>           assert stake.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Instructions/Test_Stake/Test_External/test_success_sc.py:73: AssertionError"}, "steps": [{"name": "查询账户holders信息", "status": "passed", "start": 1668077234209, "stop": 1668077234669}, {"name": "查询账户staking信息", "status": "passed", "start": 1668077234669, "stop": 1668077235119}, {"name": "构建交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_External/test_success_sc.py\", line 73, in test_custodial\n    assert stake.status_code == 200\n"}, "start": 1668077235119, "stop": 1668077243291}], "attachments": [{"name": "log", "source": "ab002897-11dc-47cd-8b01-2a2a36ead954-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'External账户CLVclaim'"}, {"name": "privatekey", "value": "['426a6690c29c5ee0052712c1fda0cc38691f3faf2a571f4b04c9705bbf3f921b']"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "type", "value": "'claim'"}, {"name": "address", "value": "'5GF2XqzK1ERH6AGkyHz1jmMLMCVGBUEyRBxJb5TFWxhiS6EY'"}, {"name": "amount", "value": "0"}], "start": 1668077234209, "stop": 1668077243293, "uuid": "ad8b8ab3-6ec5-489d-9994-3e7498bab4ef", "historyId": "0da324331a9270a517306014c0dfe52e", "testCaseId": "75c731cb8a5bfbf191104fa823a7a95b", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_External.test_success_sc.Test_stake_success#test_custodial", "labels": [{"name": "feature", "value": "Stake_Success!"}, {"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_External"}, {"name": "suite", "value": "test_success_sc"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "20830-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_External.test_success_sc"}]}