{"uid":"6d073ab83c3757f3","name":"用户登陆成功","fullName":"Testcase.test_update_ authorization.Test_create_custodial_account#test_create_account_custodial","historyId":"da79d34804f11b27ef6e31558b146d52","time":{"start":1675682121332,"stop":1675682122885,"duration":1553},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <test_update_ authorization.Test_create_custodial_account object at 0x10758a880>, test_title = '用户登陆成功'\nemail = 'lilongaat@gmail.com'\n\n    @allure.story(\"User Update Authorization!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,email', test_data)\n    def test_create_account_custodial(self, test_title, email):\n    \n        with allure.step(\"用户请求登陆\"):\n            connect_request = Http.HttpUtils.connect_req(email)\n            assert connect_request.status_code == 200\n    \n        with allure.step(\"redis查询验证码\"):\n            verifycode = Connect.Redis.get_verifycode(email)\n    \n        with allure.step(\"用户确认连接\"):\n            confirm = Http.HttpUtils.connect_confirm(email,verifycode)\n>           assert confirm.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/test_update_ authorization.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <test_update_ authorization.Test_create_custodial_account object at 0x10758a880>, test_title = '用户登陆成功'\nemail = 'lilongaat@gmail.com'\n\n    @allure.story(\"User Update Authorization!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,email', test_data)\n    def test_create_account_custodial(self, test_title, email):\n    \n        with allure.step(\"用户请求登陆\"):\n            connect_request = Http.HttpUtils.connect_req(email)\n            assert connect_request.status_code == 200\n    \n        with allure.step(\"redis查询验证码\"):\n            verifycode = Connect.Redis.get_verifycode(email)\n    \n        with allure.step(\"用户确认连接\"):\n            confirm = Http.HttpUtils.connect_confirm(email,verifycode)\n>           assert confirm.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/test_update_ authorization.py:39: AssertionError","steps":[{"name":"用户请求登陆","time":{"start":1675682121332,"stop":1675682122577,"duration":1245},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"redis查询验证码","time":{"start":1675682122577,"stop":1675682122695,"duration":118},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"用户确认连接","time":{"start":1675682122695,"stop":1675682122885,"duration":190},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/Users/lilong/Documents/Test_Api/Testcase/test_update_ authorization.py\", line 39, in test_create_account_custodial\n    assert confirm.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"977d53bcfdf46891","name":"log","source":"977d53bcfdf46891.txt","type":"text/plain","size":786}],"parameters":[],"stepsCount":3,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"User Update Authorization!"},{"name":"feature","value":"Users!"},{"name":"parentSuite","value":"Testcase"},{"name":"suite","value":"test_update_ authorization"},{"name":"subSuite","value":"Test_create_custodial_account"},{"name":"host","value":"lilongdeMacBook-Pro.local"},{"name":"thread","value":"32570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Testcase.test_update_ authorization"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email","value":"'lilongaat@gmail.com'"},{"name":"test_title","value":"'用户登陆成功'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5c0f780dd07a1ddc","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1675681849550,"stop":1675681851480,"duration":1930}},{"uid":"b44a88323fa460ca","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1675681463477,"stop":1675681465343,"duration":1866}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6d073ab83c3757f3.json","parameterValues":["'lilongaat@gmail.com'","'用户登陆成功'"]}