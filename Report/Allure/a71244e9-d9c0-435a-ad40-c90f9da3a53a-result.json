{"name": "GOERLI多签账户转账nativecoin", "status": "broken", "statusDetails": {"message": "KeyError: 'requiredSignings'", "trace": "self = <test_safe_native_success.Test_transfer_success object at 0x10ce59dc0>, test_title = 'GOERLI多签账户转账nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = '0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', networkCode = 'GOERLI'\nprivatekey_send = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\npublickey_send = '0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113'\nsendaddress = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'\nfromaddress = '0xfa9309dba246e10b9bcc79641535a2f4d1fd35ce', toaddress = '0x6490C1b13A4576128159576F9d3acadF79e8dd6f'\nvalue = '0x64', payType = '1'\n\n    @allure.story(\"Transfer Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,publickey,networkCode,privatekey_send,publickey_send,sendaddress,fromaddress,toaddress,value,payType', test_data)\n    def test_custodial(self,test_title,privatekey,publickey,networkCode,privatekey_send,publickey_send,sendaddress,fromaddress,toaddress,value,payType):\n    \n        with allure.step(\"查询holders\"):\n            holder = Httpcore.HttpCoreUtils.holder(networkCode=networkCode,address=fromaddress)\n            assert holder.status_code == 200\n    \n        with allure.step(\"Build交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": sendaddress,\n                        \"to\":toaddress,\n                        \"value\":value,\n                        \"senderPublicKey\":publickey_send,\n                        \"payType\":payType\n                        },\n                    \"type\": \"TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                for j in range(len(requiredSignings[i][\"publicKeys\"])):\n                    publickey = requiredSignings[i][\"publicKeys\"][j]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n            assert sign.status_code == 200\n            id_ = sign.json()[\"id\"]\n>           hash_ = sign.json()[\"requiredSignings\"][0][\"hash\"]\nE           KeyError: 'requiredSignings'\n\nTestcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_safe_native_success.py:74: KeyError"}, "steps": [{"name": "查询holders", "status": "passed", "start": 1671435885690, "stop": 1671435886130}, {"name": "Build交易", "status": "passed", "start": 1671435886130, "stop": 1671435888122}, {"name": "Sign交易", "status": "broken", "statusDetails": {"message": "KeyError: 'requiredSignings'\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_safe_native_success.py\", line 74, in test_custodial\n    hash_ = sign.json()[\"requiredSignings\"][0][\"hash\"]\n"}, "start": 1671435888122, "stop": 1671435888402}], "attachments": [{"name": "log", "source": "1e2d40f4-acf6-4f0e-bc48-883bb3093b68-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI多签账户转账nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "privatekey_send", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "publickey_send", "value": "'0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113'"}, {"name": "sendaddress", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "fromaddress", "value": "'0xfa9309dba246e10b9bcc79641535a2f4d1fd35ce'"}, {"name": "toaddress", "value": "'0x6490C1b13A4576128159576F9d3acadF79e8dd6f'"}, {"name": "value", "value": "'0x64'"}, {"name": "payType", "value": "'1'"}], "start": 1671435885690, "stop": 1671435888403, "uuid": "ab9016d0-5447-47c9-b5dc-bc6621e12e26", "historyId": "e82d4bf920838a0236365b333c96c9f4", "testCaseId": "47cf8f4693f8fa1407f0dac9759570b5", "fullName": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_safe_native_success.Test_transfer_success#test_custodial", "labels": [{"name": "feature", "value": "Transfer Success!"}, {"name": "story", "value": "Transfer Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM"}, {"name": "suite", "value": "test_safe_native_success"}, {"name": "subSuite", "value": "Test_transfer_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "3372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_safe_native_success"}]}