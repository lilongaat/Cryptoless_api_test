{"name": "Custodial账户IRIS质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_fail_repeat.Test_stake_success object at 0x105b60f40>, test_title = 'Custodial账户IRIS质押', networkCode = 'CLV', symbol = 'CLV'\ntype = 'stake', address = '5CFStFse5QY5dyfeHeTDSnMeBBRgxXse2D8k1TUbM67HeA9h', amount = '0.0004'\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,type,address,amount):\n    \n        # with allure.step(\"查询账户holders信息\"):\n        #     holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n        #     assert holders.status_code == 200\n    \n        # with allure.step(\"查询账户staking信息\"):\n        #     staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n        #     assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            ids = []\n            for i in range(2):\n                if type == \"claim\":\n                    body = {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                    }\n                else:\n                    body = {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                        \"amount\":amount\n                    }\n                transactionParams = {\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n                stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n                assert stake.status_code == 200\n                assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SIGNED\"\n    \n                id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n                ids.append(id)\n    \n        with allure.step(\"广播交易\"):\n            for i in range(len(ids)):\n                send = Http.HttpUtils.send(ids[i])\n>               assert send.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Instructions/Test_Stake/Test_Custodial/test_fail_repeat.py:84: AssertionError"}, "steps": [{"name": "构建交易——instructions", "status": "passed", "start": 1668161717573, "stop": 1668161734662}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_Custodial/test_fail_repeat.py\", line 84, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1668161734662, "stop": 1668161736288}], "attachments": [{"name": "log", "source": "b45313b8-7c50-4dd4-a463-7a31f91e18f7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Custodial账户IRIS质押'"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'5CFStFse5QY5dyfeHeTDSnMeBBRgxXse2D8k1TUbM67HeA9h'"}, {"name": "amount", "value": "'0.0004'"}], "start": 1668161717573, "stop": 1668161736289, "uuid": "e82874a0-c3d4-4de6-8b61-a337b7dec4f4", "historyId": "12e9d039a2ff9a3930087f3906cf7df5", "testCaseId": "a16ae22fddfc73640239b210fbae3ae8", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_fail_repeat.Test_stake_success#test_custodial", "labels": [{"name": "feature", "value": "Stake Success!"}, {"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial"}, {"name": "suite", "value": "test_fail_repeat"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "27814-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_fail_repeat"}]}