{"name": "MATIC SWAP:MATIC->USDC", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not list", "trace": "self = <test_success.Test_transfers_success object at 0x111c0d160>, test_title = 'MATIC SWAP:MATIC->USDC'\nnetworkCode = 'MATIC'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\naddress = '0x3ae919f24e9d5651dca65facd2948316fdbc4d85', from_coin = 'MATIC', to_coin = 'USDC', slippage = '1'\nfromamount = '0.00012'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,privatekey,address,from_coin,to_coin,slippage,fromamount', test_data)\n    def test_custodial(self,test_title,networkCode,privatekey,address,from_coin,to_coin,slippage,fromamount):\n    \n        with allure.step(\"core查询账户holder信息\"):\n            holder = Httpcore.HttpCoreUtils.holder(networkCode=networkCode,symbol=from_coin,address=address)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"core构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"swap\",\n                \"body\":{\n                    \"address\":address,\n                    \"from\":from_coin,\n                    \"to\":to_coin,\n                    \"fromAmount\":fromamount,\n                    \"slippage\":slippage\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Httpcore.HttpCoreUtils.core_instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n>                   \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n\nTestcasecore/Test_Instructions/Test_Swap/Test_Multi/test_success.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nprivkey_str = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\nhash_str = '94543d3e161e58b949d8ad467cb601b36203831d5f263aab358633cd0dbc0fa8'\n\n    @staticmethod\n    # sign\n    def sign(privkey_str: str, hash_str: str):\n>       privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\nE       TypeError: fromhex() argument must be str, not list\n\nCommon/Conf.py:80: TypeError"}, "steps": [{"name": "core查询账户holder信息", "status": "passed", "start": 1672048675355, "stop": 1672048675891}, {"name": "core构建交易——instructions", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not list\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Instructions/Test_Swap/Test_Multi/test_success.py\", line 66, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey,hash)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 80, in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n"}, "start": 1672048675891, "stop": 1672048678452}], "attachments": [{"name": "log", "source": "adcbd00c-8233-435e-b23a-d9638a15080c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC SWAP:MATIC->USDC'"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "address", "value": "'0x3ae919f24e9d5651dca65facd2948316fdbc4d85'"}, {"name": "from_coin", "value": "'MATIC'"}, {"name": "to_coin", "value": "'USDC'"}, {"name": "slippage", "value": "'1'"}, {"name": "fromamount", "value": "'0.00012'"}], "start": 1672048675355, "stop": 1672048678455, "uuid": "3ccef198-3e9a-4a9a-8a31-31a2b072679d", "historyId": "701d5b5d84eee12ab285a82d695652f9", "testCaseId": "0191eb21bac84eb07f6ad1a6f8fb0dc2", "fullName": "Testcasecore.Test_Instructions.Test_Swap.Test_Multi.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Instructions.Test_Swap.Test_Multi"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "9640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Instructions.Test_Swap.Test_Multi.test_success"}]}