{"name": "CrossChain USDC BSC-MATIC", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_succ.Test_transfers_success object at 0x10f9bfcd0>, test_title = 'CrossChain USDC BSC-MATIC'\nprivatekey = '9cbca176aff8c48ebd9a27c31455e34ebc86e25a17e22b3d65a716fc851ada38'\nfrom_add = '0x3d7f18ad2cea9b59e54dfaf09b327c1ccd899591', networkCode = 'BSC'\nto_add = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', toNetworkCode = 'MATIC', symbol = 'USDC', amount = '12'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,from_add,networkCode,to_add,toNetworkCode,symbol,amount', test_data)\n    def test_custodial(self,test_title,privatekey,from_add,networkCode,to_add,toNetworkCode,symbol,amount):\n    \n        with allure.step(\"查询账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"CROSS_CHAIN\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount,\n                    \"toNetworkCode\":toNetworkCode\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n>           assert send.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Cross_Chain/Test_External/test_succ.py:78: AssertionError"}, "steps": [{"name": "查询账户holder信息", "status": "passed", "start": 1672225089883, "stop": 1672225090267}, {"name": "构建交易——instructions", "status": "passed", "start": 1672225090267, "stop": 1672225092801}, {"name": "签名交易", "status": "passed", "start": 1672225092801, "stop": 1672225093237}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Cross_Chain/Test_External/test_succ.py\", line 78, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1672225093237, "stop": 1672225093649}], "attachments": [{"name": "log", "source": "564d5400-54a1-4111-8223-3b3b7a4f9621-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'CrossChain USDC BSC-MATIC'"}, {"name": "privatekey", "value": "'9cbca176aff8c48ebd9a27c31455e34ebc86e25a17e22b3d65a716fc851ada38'"}, {"name": "from_add", "value": "'0x3d7f18ad2cea9b59e54dfaf09b327c1ccd899591'"}, {"name": "networkCode", "value": "'BSC'"}, {"name": "to_add", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "toNetworkCode", "value": "'MATIC'"}, {"name": "symbol", "value": "'USDC'"}, {"name": "amount", "value": "'12'"}], "start": 1672225089882, "stop": 1672225093650, "uuid": "af0f1229-73f4-4135-b168-35abb51336ee", "historyId": "138fd4d28f93f1ce9a815869d35a6758", "testCaseId": "e8d476ee633cf8c0042b2a311acbac1a", "fullName": "Testcase.Test_Cloud.Test_Cross_Chain.Test_External.test_succ.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Custodial Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Cross_Chain.Test_External"}, {"name": "suite", "value": "test_succ"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6909-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Cross_Chain.Test_External.test_succ"}]}