{"name": "CLV External账户claim", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success.Test_stake_success object at 0x107c93820>, test_title = 'CLV External账户claim'\nnetworkCode = 'CLV', symbol = 'CLV', type = 'claim'\nprivatekey = '426a6690c29c5ee0052712c1fda0cc38691f3faf2a571f4b04c9705bbf3f921b'\naddress = '5GF2XqzK1ERH6AGkyHz1jmMLMCVGBUEyRBxJb5TFWxhiS6EY', amount = 0\n\n    @allure.story(\"External_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,privatekey,address,amount', test_data)\n    def test_External(self,test_title,networkCode,symbol,type,privatekey,address,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,address,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=address)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.staking(networkCode,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n            else:\n                body = {\n                    \"networkCode\": networkCode,\n                    \"type\": type,\n                    \"body\": {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                        \"amount\":amount\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n    \n            stake = Http.HttpUtils.instructions(body)\n    \n>           assert stake.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Stake/External/test_success.py:105: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672983901443, "stop": 1672983901702}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672983901702, "stop": 1672983901796}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672983901797, "stop": 1672983901797}, {"name": "查询账户staking信息", "status": "passed", "start": 1672983901797, "stop": 1672983902050}, {"name": "构建交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Stake/External/test_success.py\", line 105, in test_External\n    assert stake.status_code == 200\n"}, "start": 1672983902050, "stop": 1672983906308}], "attachments": [{"name": "log", "source": "baca1cd5-ffe3-49da-a1bd-ac9c25ea59bd-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'CLV External账户claim'"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "type", "value": "'claim'"}, {"name": "privatekey", "value": "'426a6690c29c5ee0052712c1fda0cc38691f3faf2a571f4b04c9705bbf3f921b'"}, {"name": "address", "value": "'5GF2XqzK1ERH6AGkyHz1jmMLMCVGBUEyRBxJb5TFWxhiS6EY'"}, {"name": "amount", "value": "0"}], "start": 1672983901443, "stop": 1672983906309, "uuid": "907c6e24-034e-43a1-ac66-6c046e15a13c", "historyId": "8f425169303494b7bd06098bf408aefc", "testCaseId": "9e4764020b2effdab5483b1679c0920e", "fullName": "Testcase.Test_Cloud.Stake.External.test_success.Test_stake_success#test_External", "labels": [{"name": "story", "value": "External_Stake_Success!"}, {"name": "feature", "value": "Stake Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Stake.External"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "14100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Stake.External.test_success"}]}