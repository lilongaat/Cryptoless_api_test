{"name": "GOERLI Custodial账户转账 nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_native_success.Test_transfers_success object at 0x110356a30>\ntest_title = 'GOERLI Custodial账户转账 nativecoin', networkCode = 'GOERLI', symbol = 'goerliETH'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']\nfrom_add = '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', to_adds = ['0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2']\nvalues = ['0x64']\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_adds,values', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_adds,values):\n    \n        if len(to_adds) == 1: #普通转账\n            payload = {\n                \"from\":from_add,\n                \"to\":to_adds[0],\n                \"value\":values[0]\n                }\n            type = \"TRANSACTION\"\n        elif len(to_adds) > 1: #批量转账\n            calls =[]\n            for i in range(len(to_adds)):\n                call = {\n                    \"to\":to_adds[i],\n                    \"value\":values[i]\n                }\n                calls.append(call)\n    \n            payload = {\n                \"from\":from_add,\n                \"calls\":calls\n                }\n            type = \"MULTISEND_TRANSACTION\"\n    \n        with allure.step(\"构建交易——transactions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"payload\":payload,\n                \"type\":type\n            }\n            transfer = Http.HttpUtils.transactions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"id\"]\n            requiredSignings = transfer.json()[\"requiredSignings\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":requiredSignings[i][\"publicKeys\"][0],\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"rebuilde交易\"):\n            params = {\n    \n            }\n            re = Http.HttpUtils.rebuild(id,params)\n            assert re.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n>           assert send.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Transactions/Test_External/Test_EVM/test_native_success.py:93: AssertionError"}, "steps": [{"name": "构建交易——transactions", "status": "passed", "start": 1671019402094, "stop": 1671019404063}, {"name": "Sign交易", "status": "passed", "start": 1671019404063, "stop": 1671019404291}, {"name": "rebuilde交易", "status": "passed", "start": 1671019404291, "stop": 1671019405324}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transactions/Test_External/Test_EVM/test_native_success.py\", line 93, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1671019405324, "stop": 1671019405493}], "attachments": [{"name": "log", "source": "d761c64c-f4cb-4cdc-bcaa-2b9a911d8873-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI Custodial账户转账 nativecoin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'goerliETH'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']"}, {"name": "from_add", "value": "'0xe525e7cd17f6dc950492755a089e452fd5d9d44f'"}, {"name": "to_adds", "value": "['0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2']"}, {"name": "values", "value": "['0x64']"}], "start": 1671019402094, "stop": 1671019405494, "uuid": "9d1828d7-6eda-4f70-a2a2-e9311812f92f", "historyId": "f3597281a05060f44a3f60ece8641cef", "testCaseId": "bc07edf8202be9e3ef7055de5801d5d9", "fullName": "Testcase.Test_Cloud.Test_Transactions.Test_External.Test_EVM.test_native_success.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Custodial Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transactions.Test_External.Test_EVM"}, {"name": "suite", "value": "test_native_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6780-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transactions.Test_External.Test_EVM.test_native_success"}]}