{"name": "IRIS 质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success.Test_transfers_success object at 0x10cb529d0>, test_title = 'IRIS 质押', networkCode = 'IRIS'\nsymbol = 'IRIS', type = 'stake'\nprivatekey = ['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b', 'e560c8c3353414a3339f17001c563cd816be808799889aa3827ea5465124a790']\naddress = 'iaa1laewhl28xx9fujqawfnmt4wls2dgyvs6qz7vle', amount = '0.00123'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,privatekey,address,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,type,privatekey,address,amount):\n    \n        with allure.step(\"core查询账户holder信息\"):\n            holder = Httpcore.HttpCoreUtils.holder(networkCode=networkCode,symbol=symbol,address=address)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        # with allure.step(\"core查询账户质押信息\"):\n        #     delegated = Httpcore.HttpCoreUtils.core_delegators(networkCode,address)\n        #     assert delegated.status_code ==200\n        #     delegated = delegated.json()[0][\"staked\"]\n    \n        with allure.step(\"core构建交易——stake\"):\n            if type == \"stake\" or type == \"un_stake\":\n                body_ = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            elif type == \"claim\":\n                body_ = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol\n                }\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":type,\n                \"body\":body_\n            }\n            transfer = Httpcore.HttpCoreUtils.core_instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                for j in range(len(publickeys)):\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickeys[j],\n                        \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcasecore/Test_Instructions/Test_Stake/Test_Multi/test_success.py:88: AssertionError"}, "steps": [{"name": "core查询账户holder信息", "status": "passed", "start": 1671697570127, "stop": 1671697570513}, {"name": "core构建交易——stake", "status": "passed", "start": 1671697570513, "stop": 1671697571875}, {"name": "签名交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Instructions/Test_Stake/Test_Multi/test_success.py\", line 88, in test_custodial\n    assert sign.status_code == 200\n"}, "start": 1671697571875, "stop": 1671697572253}], "attachments": [{"name": "log", "source": "728af432-d664-4818-8a32-ed7f92d68f2c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'IRIS 质押'"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "type", "value": "'stake'"}, {"name": "privatekey", "value": "['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b', 'e560c8c3353414a3339f17001c563cd816be808799889aa3827ea5465124a790']"}, {"name": "address", "value": "'iaa1laewhl28xx9fujqawfnmt4wls2dgyvs6qz7vle'"}, {"name": "amount", "value": "'0.00123'"}], "start": 1671697570127, "stop": 1671697572253, "uuid": "5b3692db-bce9-4df3-8113-e8055e0be541", "historyId": "a090715e6519d845fa0415c9352ea5c8", "testCaseId": "08cd05705b198227723863707fc6c27a", "fullName": "Testcasecore.Test_Instructions.Test_Stake.Test_Multi.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Instructions.Test_Stake.Test_Multi"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "1621-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Instructions.Test_Stake.Test_Multi.test_success"}]}