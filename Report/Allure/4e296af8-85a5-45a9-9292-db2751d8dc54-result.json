{"name": "BSC extarnal账户转账nativecoin 超出maxfee", "status": "failed", "statusDetails": {"message": "AssertionError: assert 2300000 == 2101000", "trace": "self = <test_rebuild_maxfee.Test_transfers_success object at 0x10968bac0>\ntest_title = 'BSC extarnal账户转账nativecoin 超出maxfee', networkCode = 'BSC', symbol = 'BNB'\nprivatekey = '100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'\nfrom_add = '0x9b532cf5f662e51ba643672797ad3ec1a60bb939', to_add = '0x3d7f18Ad2cEa9B59E54dFAf09b327C1CCd899591'\namount = '0.000001', status_code_check = 400, code_check = 2101000\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount,status_code_check,code_check', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount,status_code_check,code_check):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            if networkCode == \"BTC\":\n                pass\n            elif networkCode == \"DOGE\":\n                response = Httpexplore.DOGE.balance(from_add)\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()))\n            elif networkCode == \"ETH\":\n                pass\n            elif networkCode == \"BSC\":\n                if symbol == \"BNB\":\n                    response = Httpexplore.BSC.balance(from_add)\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n                else:\n                    response = Httpexplore.BSC.balance_erc20(from_add,\"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\")\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            elif networkCode == \"MATIC\":\n                if symbol == \"MATIC\":\n                    response = Httpexplore.MATIC.balance(from_add)\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n                else:\n                    response = Httpexplore.MATIC.balance_erc20(from_add,\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\")\n                    assert response.status_code == 200\n                    balance = Decimal(response.json()[\"result\"])/Decimal(10**6)\n            elif networkCode == \"IRIS\":\n                response = Httpexplore.IRIS.balance(from_add)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\n                balance = Decimal(balance_detail[\"amount\"])/Decimal(10**6)\n            elif networkCode == \"CLV\":\n                response = Httpexplore.CLV.balance(from_add)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\n                balance = (Decimal(balance_detail[\"balance\"]) - Decimal(balance_detail[\"lock\"]) - Decimal(balance_detail[\"reserved\"]))/Decimal(10**18)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n    \n        with allure.step(\"rebuild交易\"):\n            if networkCode == \"BSC\":\n                params = {\n                    \"gasPrice\":\"0x6edf2a079f\"\n                }\n            else:\n                params = {\n                    \"maxFeePerGas\":\"0x19fc4dda1b2c\",\n                    \"maxPriorityFeePerGas\":\"0x19fc4dd9cd0c\"\n                }\n            rebuild = Http.HttpUtils.rebuild(id,params)\n            assert rebuild.status_code == 200\n            assert rebuild.json()[\"statusDesc\"] == \"BUILDING\"\n    \n            id = rebuild.json()[\"id\"]\n            requiredSignings = rebuild.json()[\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n            assert send.status_code == status_code_check\n>           assert send.json()[\"code\"] == code_check\nE           assert 2300000 == 2101000\n\nTestcase/Test_Cloud/Test_Transfer/Test_External/test_rebuild_maxfee.py:147: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672825117080, "stop": 1672825118367}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672825118367, "stop": 1672825118469}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672825118470, "stop": 1672825118470}, {"name": "构建交易——instructions", "status": "passed", "start": 1672825118470, "stop": 1672825119866}, {"name": "rebuild交易", "status": "passed", "start": 1672825119866, "stop": 1672825120054}, {"name": "签名交易", "status": "passed", "start": 1672825120054, "stop": 1672825120209}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 2300000 == 2101000\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_External/test_rebuild_maxfee.py\", line 147, in test_custodial\n    assert send.json()[\"code\"] == code_check\n"}, "start": 1672825120209, "stop": 1672825121202}], "attachments": [{"name": "log", "source": "a6d22709-df0d-42bc-a915-d6cd6013826b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'BSC extarnal账户转账nativecoin 超出maxfee'"}, {"name": "networkCode", "value": "'BSC'"}, {"name": "symbol", "value": "'BNB'"}, {"name": "privatekey", "value": "'100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'"}, {"name": "from_add", "value": "'0x9b532cf5f662e51ba643672797ad3ec1a60bb939'"}, {"name": "to_add", "value": "'0x3d7f18Ad2cEa9B59E54dFAf09b327C1CCd899591'"}, {"name": "amount", "value": "'0.000001'"}, {"name": "status_code_check", "value": "400"}, {"name": "code_check", "value": "2101000"}], "start": 1672825117080, "stop": 1672825121203, "uuid": "1eeef828-7db1-4b03-84ea-b95dcc6b9171", "historyId": "28d5a1a3721decdb690193ec98f1de9f", "testCaseId": "05ad0dece830ac2678fe2c31fb4720e4", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_External.test_rebuild_maxfee.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_External"}, {"name": "suite", "value": "test_rebuild_maxfee"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_External.test_rebuild_maxfee"}]}