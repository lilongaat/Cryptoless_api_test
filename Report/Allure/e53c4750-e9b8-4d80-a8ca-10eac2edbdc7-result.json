{"name": "MATIC普通账户转账nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_success.Test_transfer_success object at 0x102c9b220>, test_title = 'MATIC普通账户转账nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'], networkCode = 'MATIC'\nfromaddress = '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', toaddress = '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', value = '0x0'\n\n    @allure.story(\"Transfer Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,fromaddress,toaddress,value', test_data)\n    def test_custodial(self,test_title,privatekey,networkCode,fromaddress,toaddress,value):\n    \n        with allure.step(\"Build交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": fromaddress,\n                        \"to\": toaddress,\n                        \"data\": \"0x\",\n                        \"value\": value\n                    },\n                    \"type\": \"TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcasecore/Test_Transactions/Test_Transfer/Test_Transfer_ETH/test_success.py:63: AssertionError"}, "steps": [{"name": "Build交易", "status": "passed", "start": 1669791746363, "stop": 1669791748811}, {"name": "Sign交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Transactions/Test_Transfer/Test_Transfer_ETH/test_success.py\", line 63, in test_custodial\n    assert sign.status_code == 200\n"}, "start": 1669791748811, "stop": 1669791749042}], "attachments": [{"name": "log", "source": "2fa86f6b-ee16-4660-a867-39c0fddf57fc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC普通账户转账nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "fromaddress", "value": "'0xe525e7cd17f6dc950492755a089e452fd5d9d44f'"}, {"name": "toaddress", "value": "'0xe525e7cd17f6dc950492755a089e452fd5d9d44f'"}, {"name": "value", "value": "'0x0'"}], "start": 1669791746363, "stop": 1669791749042, "uuid": "4b3da92c-4c79-4579-bc92-969e1a00ed44", "historyId": "d6bd4e15cab6ebbddad32a05a5c79831", "testCaseId": "78ab37886c81fd4b35a04af92c7b8992", "fullName": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_ETH.test_success.Test_transfer_success#test_custodial", "labels": [{"name": "story", "value": "Transfer Success!"}, {"name": "feature", "value": "Transfer Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_ETH"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfer_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "44480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_ETH.test_success"}]}