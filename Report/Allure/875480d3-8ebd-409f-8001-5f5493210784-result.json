{"name": "MATIC多签账户转账nativecoin", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not dict", "trace": "self = <test_safe_native_success.Test_transfer_success object at 0x10ed8b430>, test_title = 'MATIC多签账户转账nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9', networkCode = 'MATIC'\nsendaddress = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', fromaddress = '0x6490C1b13A4576128159576F9d3acadF79e8dd6f'\ntoaddress = '0x6490C1b13A4576128159576F9d3acadF79e8dd6f', value = '0x64'\n\n    @allure.story(\"Transfer Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,publickey,networkCode,sendaddress,fromaddress,toaddress,value', test_data)\n    def test_custodial(self,test_title,privatekey,publickey,networkCode,sendaddress,fromaddress,toaddress,value):\n    \n        with allure.step(\"Build交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": sendaddress,\n                        \"safeInputRequest\":{\n                            \"contract\":fromaddress,\n                            # \"contractNonce\":\"\",\n                            \"participants\":publickey,\n                            \"to\":toaddress,\n                            \"value\":value\n                        }\n                    },\n                    \"type\": \"SAFE_TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                for j in range(len(requiredSignings[i][\"publicKeys\"])):\n                    publickey = requiredSignings[i][\"publicKeys\"][j]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n            assert sign.status_code == 200\n            id_ = sign.json()[\"id\"]\n            hash_ = sign.json()[\"requiredSignings\"][0]\n    \n            signatures_ = [{\n                        \"hash\":hash_,\n                        \"publicKey\":publickey[0],\n>                       \"signature\":Conf.Config.sign(privatekey[0],hash_)\n    \n                    }]\n\nTestcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_safe_native_success.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nprivkey_str = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nhash_str = {'hash': '98518f1d491b7655c4052d47c2f9409c8c0d7094a15c2ef4ba5bedae997e4bf7', 'threshold': 1}\n\n    @staticmethod\n    # sign\n    def sign(privkey_str: str, hash_str: str):\n        privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n>       msg = bytes(bytearray.fromhex(hash_str))\nE       TypeError: fromhex() argument must be str, not dict\n\nCommon/Conf.py:81: TypeError"}, "steps": [{"name": "Build交易", "status": "passed", "start": 1669802076475, "stop": 1669802077055}, {"name": "Sign交易", "status": "broken", "statusDetails": {"message": "TypeError: fromhex() argument must be str, not dict\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_safe_native_success.py\", line 76, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey[0],hash_)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 81, in sign\n    msg = bytes(bytearray.fromhex(hash_str))\n"}, "start": 1669802077055, "stop": 1669802079554}], "attachments": [{"name": "log", "source": "4320cb44-32eb-40fd-9490-f7c96ec8fc7c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC多签账户转账nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "sendaddress", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "fromaddress", "value": "'0x6490C1b13A4576128159576F9d3acadF79e8dd6f'"}, {"name": "toaddress", "value": "'0x6490C1b13A4576128159576F9d3acadF79e8dd6f'"}, {"name": "value", "value": "'0x64'"}], "start": 1669802076474, "stop": 1669802079555, "uuid": "8deb52bd-80d7-489d-901c-13b2d3e46955", "historyId": "8e50d9f2012001d46d17293731561dfc", "testCaseId": "47cf8f4693f8fa1407f0dac9759570b5", "fullName": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_safe_native_success.Test_transfer_success#test_custodial", "labels": [{"name": "feature", "value": "Transfer Success!"}, {"name": "story", "value": "Transfer Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM"}, {"name": "suite", "value": "test_safe_native_success"}, {"name": "subSuite", "value": "Test_transfer_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "46090-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_safe_native_success"}]}