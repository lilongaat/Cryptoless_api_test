{"name": "IRIS 3-4shared账户转账", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range", "trace": "self = <test_success.Test_transfers_success object at 0x110ae8e20>, test_title = 'IRIS 3-4shared账户转账'\nnetworkCode = 'IRIS', symbol = 'IRIS'\nprivatekey = ['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b', 'e560c8c3353414a3339f17001c563cd816be808799889aa3827ea5465124a790', 'dfa7ef6ccec876014f4a5b00393404268d8de04ef190fdc14383fd8be8afc708']\nfrom_add = 'iaa15kv39f7hepkqlsyqx5v8ye28743xnfrkzngfgu', to_add = 'iaa15h0lvaa6slvj0hg4d64548j2c5fds2zv8tkvgs'\namount = '0.000015'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n>           balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n\nTestcase/Test_Cloud/Test_Transfer/Test_Share/test_success.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnetworkCode = 'IRIS', address = 'iaa15kv39f7hepkqlsyqx5v8ye28743xnfrkzngfgu', symbol = 'IRIS'\n\n    @staticmethod\n    def query(networkCode:str, address:str, symbol=\"USDC\"):\n        if networkCode == \"BTC\":\n            if env_type == 0:\n                response = BTC_Test.balance(address)\n                if response.status_code == 200:\n                    balance = (Decimal(response.json()[\"chain_stats\"][\"funded_txo_sum\"]) - Decimal(response.json()[\"chain_stats\"][\"spent_txo_sum\"]))/Decimal(10**8)\n                else:\n                    balance = None\n            elif env_type == 1:\n                response = BTC.balance(address)\n                if response.status_code == 200:\n                    balance = (Decimal(response.json()[\"chain_stats\"][\"funded_txo_sum\"]) - Decimal(response.json()[\"chain_stats\"][\"spent_txo_sum\"]))/Decimal(10**8)\n        elif networkCode == \"DOGE\":\n            response = DOGE.balance(address)\n            assert response.status_code == 200\n            balance = Decimal(str(response.json()))\n        elif networkCode == \"ETH\":\n            pass\n        elif networkCode == \"GOERLI\":\n            if symbol == \"GoerliETH\":\n                response = GOERLI.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()[\"result\"]))/Decimal(10**18)\n            else:\n                response = GOERLI.balance_erc20(address,\"0x1eC2CE6108240118Ff2c66eC8AFAC28618D7e066\")\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()[\"result\"]))/Decimal(10**18)\n        elif networkCode == \"BSC\":\n            if symbol == \"BNB\":\n                response = BSC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = BSC.balance_erc20(address,\"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n        elif networkCode == \"MATIC\":\n            if symbol == \"MATIC\":\n                response = MATIC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = MATIC.balance_erc20(address,\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**6)\n        elif networkCode == \"ATOM\":\n            response = ATOM.balance(address)\n            assert response.status_code == 200\n            balance_ = [b.get(\"amount\") for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uatom\"]\n            balance = (Decimal(int(balance_[0]))/Decimal(10**6))\n        elif networkCode == \"IRIS\":\n            response = IRIS.balance(address)\n            assert response.status_code == 200\n>           balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\nE           IndexError: list index out of range\n\nCommon/Httpexplore.py:563: IndexError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Share/test_success.py\", line 54, in test_custodial\n    balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n  File \"/Users/lilong/Documents/Test_Api/Common/Httpexplore.py\", line 563, in query\n    balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\n"}, "start": 1673081461636, "stop": 1673081462778}], "parameters": [{"name": "test_title", "value": "'IRIS 3-4shared账户转账'"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "privatekey", "value": "['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b', 'e560c8c3353414a3339f17001c563cd816be808799889aa3827ea5465124a790', 'dfa7ef6ccec876014f4a5b00393404268d8de04ef190fdc14383fd8be8afc708']"}, {"name": "from_add", "value": "'iaa15kv39f7hepkqlsyqx5v8ye28743xnfrkzngfgu'"}, {"name": "to_add", "value": "'iaa15h0lvaa6slvj0hg4d64548j2c5fds2zv8tkvgs'"}, {"name": "amount", "value": "'0.000015'"}], "start": 1673081461636, "stop": 1673081462781, "uuid": "cc83b127-66f6-43f2-8b0e-db3ae36b8887", "historyId": "95e0dad0b3afd4ca368ef8c69b6fac00", "testCaseId": "f280abede794e675248cc33ca19ba7e5", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "19933-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_success"}]}