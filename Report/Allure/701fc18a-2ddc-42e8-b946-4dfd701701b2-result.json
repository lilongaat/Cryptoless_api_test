{"name": "CLV 3-4shared账户转账", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <test_success.Test_transfers_success object at 0x10c417af0>, test_title = 'CLV 3-4shared账户转账'\nnetworkCode = 'CLV', symbol = 'CLV'\nprivatekey = ['7967c43bd3f3874ccfa6ff6ceda5faa8c699ad0fe2be33f44c8bb8abcb23a2fd', '7cc57c9ab4d60f6991dd32827927266c90a7c165db6c71ea344c86a05e582b68', 'b7eb71a716e21bbc82bce03318c386cacb64b2b8eab0b341749b4aed92fc5136']\nfrom_add = '5DyVmFJSPXRu4Ufv1Q46y1w7MejCpS5VrLvJwXKNMppzg9Nk'\nto_add = '5HWsR2E9YLKqfz6ybMufU5t1qyjUMzmBwFjppsaEwZHegViT', amount = '0.0000161'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n>           balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n\nTestcase/Test_Cloud/Test_Transfer/Test_Share/test_success.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnetworkCode = 'CLV', address = '5DyVmFJSPXRu4Ufv1Q46y1w7MejCpS5VrLvJwXKNMppzg9Nk', symbol = 'CLV'\n\n    @staticmethod\n    def query(networkCode:str, address:str, symbol=\"USDC\"):\n        if networkCode == \"BTC\":\n            if env_type == 0:\n                response = BTC_Test.balance(address)\n                if response.status_code == 200:\n                    balance = (Decimal(response.json()[\"chain_stats\"][\"funded_txo_sum\"]) - Decimal(response.json()[\"chain_stats\"][\"spent_txo_sum\"]))/Decimal(10**8)\n                else:\n                    balance = None\n            elif env_type == 1:\n                response = BTC.balance(address)\n                if response.status_code == 200:\n                    balance = (Decimal(response.json()[\"chain_stats\"][\"funded_txo_sum\"]) - Decimal(response.json()[\"chain_stats\"][\"spent_txo_sum\"]))/Decimal(10**8)\n        elif networkCode == \"DOGE\":\n            response = DOGE.balance(address)\n            assert response.status_code == 200\n            balance = Decimal(str(response.json()))\n        elif networkCode == \"ETH\":\n            pass\n        elif networkCode == \"GOERLI\":\n            if symbol == \"GoerliETH\":\n                response = GOERLI.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()[\"result\"]))/Decimal(10**18)\n            else:\n                response = GOERLI.balance_erc20(address,\"0x1eC2CE6108240118Ff2c66eC8AFAC28618D7e066\")\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()[\"result\"]))/Decimal(10**18)\n        elif networkCode == \"BSC\":\n            if symbol == \"BNB\":\n                response = BSC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = BSC.balance_erc20(address,\"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n        elif networkCode == \"MATIC\":\n            if symbol == \"MATIC\":\n                response = MATIC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = MATIC.balance_erc20(address,\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**6)\n        elif networkCode == \"ATOM\":\n            response = ATOM.balance(address)\n            assert response.status_code == 200\n            balance_ = [b.get(\"amount\") for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uatom\"]\n            balance = (Decimal(int(balance_[0]))/Decimal(10**6))\n        elif networkCode == \"IRIS\":\n            response = IRIS.balance(address)\n            assert response.status_code == 200\n            balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\n            balance = Decimal(balance_detail[\"amount\"])/Decimal(10**6)\n        elif networkCode == \"CLV\":\n            if env_type == 1:\n                response = CLV.balance(address)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\n                balance = (Decimal(balance_detail[\"balance\"]) - Decimal(balance_detail[\"lock\"]) - Decimal(balance_detail[\"reserved\"]))/Decimal(10**18)\n            elif env_type == 0:\n                response = CLV_Test.balance(address)\n                assert response.status_code == 200\n>               balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\nE               TypeError: 'NoneType' object is not subscriptable\n\nCommon/Httpexplore.py:574: TypeError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Share/test_success.py\", line 54, in test_custodial\n    balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n  File \"/Users/lilong/Documents/Test_Api/Common/Httpexplore.py\", line 574, in query\n    balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\n"}, "start": 1673077610830, "stop": 1673077611317}], "attachments": [{"name": "log", "source": "a26cb6ec-625c-4381-996a-95cca585afb4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'CLV 3-4shared账户转账'"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "privatekey", "value": "['7967c43bd3f3874ccfa6ff6ceda5faa8c699ad0fe2be33f44c8bb8abcb23a2fd', '7cc57c9ab4d60f6991dd32827927266c90a7c165db6c71ea344c86a05e582b68', 'b7eb71a716e21bbc82bce03318c386cacb64b2b8eab0b341749b4aed92fc5136']"}, {"name": "from_add", "value": "'5DyVmFJSPXRu4Ufv1Q46y1w7MejCpS5VrLvJwXKNMppzg9Nk'"}, {"name": "to_add", "value": "'5HWsR2E9YLKqfz6ybMufU5t1qyjUMzmBwFjppsaEwZHegViT'"}, {"name": "amount", "value": "'0.0000161'"}], "start": 1673077610830, "stop": 1673077611317, "uuid": "d6f260cf-bd66-41eb-a0c0-96a255c6352e", "historyId": "211a9d2581f344598f1fc0b9fe02ce17", "testCaseId": "f280abede794e675248cc33ca19ba7e5", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "19581-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_success"}]}