{"name": "BTC 创建+查询+删除托管账户", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: [Errno Expecting value] : 0", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/requests/models.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x10bce9a90>, s = ''\n_w = <built-in method match of re.Pattern object at 0x10bc1c3f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x10bce9a90>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_create_success.Test_create_custodial_account object at 0x10dbf2df0>, test_title = 'BTC 创建+查询+删除托管账户'\nname = '托管账户BTC1671018028', networkCode = 'BTC'\n\n    @allure.story(\"Create Custodial Account Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,name,networkCode', test_data)\n    def test_create_account_custodial(self, test_title, name, networkCode):\n    \n        with allure.step(\"创建托管账户\"):\n            custodial_account = Http.HttpUtils.create_custodial_account(name,networkCode)\n            assert custodial_account.status_code == 200\n            assert custodial_account.json()[\"status\"] == \"enable\"\n            id = custodial_account.json()[\"id\"]\n            address = custodial_account.json()[\"address\"]\n    \n        with allure.step(\"查询账户列表\"):\n            account_list = Http.HttpUtils.accounts(networkCode,address)\n            assert account_list.status_code == 200\n            assert account_list.json()[\"list\"][0][\"id\"] == id\n            assert account_list.json()[\"list\"][0][\"address\"] == address\n    \n        with allure.step(\"查询账户byid\"):\n            account_detail = Http.HttpUtils.account_byid(id)\n            assert account_detail.status_code == 200\n            assert account_detail.json()[\"id\"] == id\n            assert account_detail.json()[\"address\"] == address\n    \n        with allure.step(\"修改账户byid\"):\n            name_update = name + \"_\" + str(Conf.Config.now_timestamp())\n            account_update = Http.HttpUtils.del_account_byid(id)\n            assert account_update.status_code == 200\n>           assert account_update.json()[\"name\"] == name_update\n\nTestcase/Test_Account/Test_Custodial_Account/test_create_success.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            if is_py2: # e is a ValueError\n                raise RequestsJSONDecodeError(e.message)\n            else:\n>               raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE               requests.exceptions.JSONDecodeError: [Errno Expecting value] : 0\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/requests/models.py:917: JSONDecodeError"}, "steps": [{"name": "创建托管账户", "status": "passed", "start": 1671018028400, "stop": 1671018032236}, {"name": "查询账户列表", "status": "passed", "start": 1671018032236, "stop": 1671018032422}, {"name": "查询账户byid", "status": "passed", "start": 1671018032423, "stop": 1671018032580}, {"name": "修改账户byid", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: [Errno Expecting value] : 0\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Account/Test_Custodial_Account/test_create_success.py\", line 72, in test_create_account_custodial\n    assert account_update.json()[\"name\"] == name_update\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/requests/models.py\", line 917, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "start": 1671018032580, "stop": 1671018032784}], "attachments": [{"name": "log", "source": "9cc90368-43a1-47c0-aced-c63a40d1f869-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'BTC 创建+查询+删除托管账户'"}, {"name": "name", "value": "'托管账户BTC1671018028'"}, {"name": "networkCode", "value": "'BTC'"}], "start": 1671018028399, "stop": 1671018032789, "uuid": "f6a19a7a-65b8-4ee6-bbda-8fc1f8dcac17", "historyId": "9075f22fce08bf11fc0c4757b9347330", "testCaseId": "80f44c24714eeb0a607c374d6bc14cf4", "fullName": "Testcase.Test_Account.Test_Custodial_Account.test_create_success.Test_create_custodial_account#test_create_account_custodial", "labels": [{"name": "feature", "value": "Create Custodial Account!"}, {"name": "story", "value": "Create Custodial Account Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Account.Test_Custodial_Account"}, {"name": "suite", "value": "test_create_success"}, {"name": "subSuite", "value": "Test_create_custodial_account"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Account.Test_Custodial_Account.test_create_success"}]}