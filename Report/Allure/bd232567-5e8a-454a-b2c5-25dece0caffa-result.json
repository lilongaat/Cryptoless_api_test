{"name": "Safe2-2账户IRIS质押", "status": "broken", "statusDetails": {"message": "Exception: 请求异常", "trace": "self = <test_success.Test_stake_success object at 0x111f6c6d0>, test_title = 'Safe2-2账户IRIS质押'\nprivatekey = ['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b'], networkCode = 'IRIS', symbol = 'IRIS', type = 'stake'\naddress = 'iaa1x5m8vh53addgrdtnsxc07tryn46f9d7x4q3p40', amount = '0.0003'\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,privatekey,networkCode,symbol,type,address,amount):\n    \n        with allure.step(\"查询From账户holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                }\n            else:\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n            assert stake.status_code == 200\n            assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"BUILDING\"\n    \n            id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = stake.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = stake.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——sign\"):\n            sign = Http.HttpUtils.sign(id,signatures,serialized)\n            assert sign.status_code == 200\n            assert sign.json()[\"status\"] == \"SIGNED\"\n    \n            id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n    \n        with allure.step(\"广播交易\"):\n>           send = Http.HttpUtils.send(id)\n\nTestcase/Test_Instructions/Test_Stake/Test_Safe/test_success.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nid = '1590658752482623490'\nAuthorization = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTg1MTAyNzkxNDY2NDg3ODEwIiwiZXhwIjoxNjk5NjAyNjg2LCJpYXQiOjE2NjgwNjY2ODYsInVzZXJJZCI6MTU4NTEwMjc5MTQ2NjQ4NzgxMH0.crnXQzc0JOD7wPow9R3P3-uZrJmzOeUF6WOqy5OhxqY'\n\n    @staticmethod\n    # send\n    def send(id: str, Authorization=token):\n        url = url_ + \"/vault/transactions/\" + id\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": Authorization\n        }\n    \n        logger.info('\\n'+\"<-----Send----->\"+\"\\n\"+\"Url:\"+url+'\\n\\n'+'Headers:'+json.dumps(headers)+'\\n\\n')\n    \n        res = requests.patch(url=url, headers=headers, timeout=timeout_)\n        if res.status_code == 200:\n            logger.info('\\n'+\"<-----Send Response----->\"+\"\\n\"+(res.text))\n            return res\n        else:\n            logger.info('\\n'+\"<-----Send Response Error----->\"+\"\\n\"+str(res.status_code)+\"\\n\"+(res.text))\n>           raise Exception(\"请求异常\")\nE           Exception: 请求异常\n\nCommon/Http.py:649: Exception"}, "steps": [{"name": "查询From账户holders信息——holders", "status": "passed", "start": 1668077571356, "stop": 1668077571903}, {"name": "查询账户staking信息", "status": "passed", "start": 1668077571903, "stop": 1668077572874}, {"name": "构建交易——instructions", "status": "passed", "start": 1668077572874, "stop": 1668077575795}, {"name": "签名交易——sign", "status": "passed", "start": 1668077575795, "stop": 1668077578661}, {"name": "广播交易", "status": "broken", "statusDetails": {"message": "Exception: 请求异常\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_Safe/test_success.py\", line 108, in test_custodial\n    send = Http.HttpUtils.send(id)\n  File \"/Users/lilong/Documents/Test_Api/Common/Http.py\", line 649, in send\n    raise Exception(\"请求异常\")\n"}, "start": 1668077578661, "stop": 1668077579071}], "attachments": [{"name": "log", "source": "7b521690-8958-4d7e-aad0-41f3405bfa1a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Safe2-2账户IRIS质押'"}, {"name": "privatekey", "value": "['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b']"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'iaa1x5m8vh53addgrdtnsxc07tryn46f9d7x4q3p40'"}, {"name": "amount", "value": "'0.0003'"}], "start": 1668077571356, "stop": 1668077579074, "uuid": "af52da41-f29e-470f-91fe-1b2be28f063f", "historyId": "a6e2d0b447b09d99071e72393d123d7b", "testCaseId": "fabd1d690204eba4479852c629b48510", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_Safe.test_success.Test_stake_success#test_custodial", "labels": [{"name": "feature", "value": "Stake_Success!"}, {"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_Safe"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "21074-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_Safe.test_success"}]}