{"name": "GOERLI extarnal账户转账 nativecoin", "status": "broken", "statusDetails": {"message": "ValueError: non-hexadecimal number found in fromhex() arg at position 1", "trace": "self = <test_success.Test_transfers_success object at 0x111b414f0>, test_title = 'GOERLI extarnal账户转账 nativecoin'\nnetworkCode = 'GOERLI', symbol = 'goerliETH'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_add = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', to_add = '0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'\namount = '0.00012'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n>                   \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n\nTestcase/Test_Instructions_new/Test_Transfer/Test_External/test_success.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nprivkey_str = 'd', hash_str = '6b7c0ef24ad579a31bd24ce14ff7c9f59c5ac9c0fc5dbaaf373b781fb338b487'\n\n    @staticmethod\n    # sign\n    def sign(privkey_str: str, hash_str: str):\n>       privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\nE       ValueError: non-hexadecimal number found in fromhex() arg at position 1\n\nCommon/Conf.py:80: ValueError"}, "steps": [{"name": "构建交易——instructions", "status": "broken", "statusDetails": {"message": "ValueError: non-hexadecimal number found in fromhex() arg at position 1\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions_new/Test_Transfer/Test_External/test_success.py\", line 64, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey[0],hash)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 80, in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n"}, "start": 1670838754255, "stop": 1670838756326}], "attachments": [{"name": "log", "source": "129cc45d-74ae-4906-9fc5-f074f7f3f07a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI extarnal账户转账 nativecoin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'goerliETH'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_add", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "to_add", "value": "'0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'"}, {"name": "amount", "value": "'0.00012'"}], "start": 1670838754255, "stop": 1670838756327, "uuid": "601f0c9a-de24-4bfa-b5ea-d5f548e782fb", "historyId": "7af8234fc0d73ee3c348ce7789e1379a", "testCaseId": "5630cc46eaecad9ce8c9c36f1e5a8c39", "fullName": "Testcase.Test_Instructions_new.Test_Transfer.Test_External.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions_new.Test_Transfer.Test_External"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "10425-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions_new.Test_Transfer.Test_External.test_success"}]}