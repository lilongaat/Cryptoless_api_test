{"name": "单签账户转账-正常转账!", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_transfers_success_clv.Test_transfers_success_clv object at 0x103bad2e0>\ntest_title = '正常转账!'\nprivatekey = ['053d329fb54f8ab36473e74fd4905644a4d5857836274d3116675bad4cfa4273']\nPublicKeys = ['02fd88692ce948598b310d9ac081d551e74a7b4a70661f45e92544e0c3fa0b70f1']\nnetworkCode = 'CLV', symbol = 'CLV'\nfrom_add = '5HWsR2E9YLKqfz6ybMufU5t1qyjUMzmBwFjppsaEwZHegViT'\nto_add = '5EMjsczhZw8mUYfyfDJT69PUBAirrviW2bH4chQxKHheCvX3'\namount = '0.00000008'\n\n    @allure.story(\"Transfers_CLV_Success!\")\n    @allure.title('单签账户转账-{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_transfers_address(self,test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——transfers\"):\n            transactionParams = {\n                \"memo\":\"hahahhahahhahahhaahhahhahhahahaha@@==这是一段描述！！====@@hahahhahahhahahhaahhahhahhahahaha\"\n            }\n            res = Http.HttpUtils.post_transfers(networkCode,symbol,PublicKeys,from_add,to_add,amount,transactionParams)\n            assert res[0].status_code == 200\n    \n        signature = Conf.Config.sign(privatekey[0],res[5][0]['hash'])\n        signatures = [\n            {\n                \"hash\":res[5][0]['hash'],\n                \"publickey\":res[5][0]['publicKeys'][0],\n                \"signature\":signature\n            }\n        ]\n    \n        with allure.step(\"签名交易——sign\"):\n            sig = Http.HttpUtils.post_sign_transfers(res[1],res[2],res[3],res[4],res[5],res[6],signatures)\n            assert sig.status_code == 200\n    \n        with allure.step(\"广播交易——send\"):\n            send = Http.HttpUtils.post_send_transfers(res[3])\n            assert send.status_code == 200\n    \n        with allure.step(\"查询关联交易记录——balance-transactions by hash\"):\n            # 循环查10次关联交易记录\n            for i in range(10):\n                sleep(60)\n                logger.info(\"<----查询次数:第\" + str(i+1) + \"次---->\")\n                transcations = Http.HttpUtils.get_transactions_byhash(send.json()[\"hash\"])\n                assert transcations.status_code == 200\n                if (len(transcations.json()) > 0):\n                    break\n    \n            if (from_add == to_add):\n                assert len(transcations.json()) == 1 # 自己转自己一条交易记录\n                assert transcations.json()[0][\"type\"] == -1 # type 是 -1\n                assert transcations.json()[0][\"address\"] == res[0].json()[\"from\"] # address 是转出地址\n                # assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"] + (send.json()[\"hash\"])/(10^8)\n            else:\n>               assert len(transcations.json()) == 2\nE               assert 0 == 2\nE                +  where 0 = len([])\nE                +    where [] = <bound method Response.json of <Response [200]>>()\nE                +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\nTestcase/Test_Transfers/Test_Transfers_CLV/test_transfers_success_clv.py:66: AssertionError"}, "steps": [{"name": "构建交易——transfers", "status": "passed", "start": 1657164130092, "stop": 1657164131552}, {"name": "签名交易——sign", "status": "passed", "start": 1657164131552, "stop": 1657164131818}, {"name": "广播交易——send", "status": "passed", "start": 1657164131818, "stop": 1657164132491}, {"name": "查询关联交易记录——balance-transactions by hash", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Transfers/Test_Transfers_CLV/test_transfers_success_clv.py\", line 66, in test_transfers_address\n    assert len(transcations.json()) == 2\n"}, "start": 1657164132491, "stop": 1657164735995}], "attachments": [{"name": "log", "source": "e84eef1a-a26c-426e-9885-24a3e4d3b20c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常转账!'"}, {"name": "privatekey", "value": "['053d329fb54f8ab36473e74fd4905644a4d5857836274d3116675bad4cfa4273']"}, {"name": "PublicKeys", "value": "['02fd88692ce948598b310d9ac081d551e74a7b4a70661f45e92544e0c3fa0b70f1']"}, {"name": "networkCode", "value": "'CLV'"}, {"name": "symbol", "value": "'CLV'"}, {"name": "from_add", "value": "'5HWsR2E9YLKqfz6ybMufU5t1qyjUMzmBwFjppsaEwZHegViT'"}, {"name": "to_add", "value": "'5EMjsczhZw8mUYfyfDJT69PUBAirrviW2bH4chQxKHheCvX3'"}, {"name": "amount", "value": "'0.00000008'"}], "start": 1657164130092, "stop": 1657164736001, "uuid": "b75821e1-80d0-4bdc-91f8-3ae7a2aee6c4", "historyId": "43f04b50d9600ef3e51151b0513104b1", "testCaseId": "7e6936563aa12e2a42999f674f50cfe6", "fullName": "Testcase.Test_Transfers.Test_Transfers_CLV.test_transfers_success_clv.Test_transfers_success_clv#test_transfers_address", "labels": [{"name": "feature", "value": "Transfers_Success!"}, {"name": "story", "value": "Transfers_CLV_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Transfers.Test_Transfers_CLV"}, {"name": "suite", "value": "test_transfers_success_clv"}, {"name": "subSuite", "value": "Test_transfers_success_clv"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "29233-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Transfers.Test_Transfers_CLV.test_transfers_success_clv"}]}