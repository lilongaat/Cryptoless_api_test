{"name": "GOERLI safe账户转账 nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <Test_rebuild_maxfee.Test_transfers_success object at 0x10cd01190>, test_title = 'GOERLI safe账户转账 nativecoin'\nnetworkCode = 'GOERLI', symbol = 'GoerliETH'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_add = '0x9D055026eB8D83eF561D5D8084F2DD02e7AD2C17', to_add = '0xa7a9e710f9a3b4184d4f8b7d379cec262f2382c2'\namount = '0.00012'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n    \n        with allure.step(\"rebuild交易\"):\n            if networkCode == \"BSC\":\n                params = {\n                    \"gasPrice\":\"0x6edf2a079f\"\n                }\n            else:\n                params = {\n                    \"maxFeePerGas\":\"0x19fc4dda1b2c\",\n                    \"maxPriorityFeePerGas\":\"0x19fc4dd9cd0c\"\n                }\n            rebuild = Http.HttpUtils.rebuild(id,params)\n>           assert rebuild.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/Test_rebuild_maxfee.py:107: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1673002781473, "stop": 1673002782057}, {"name": "查询from账户holder信息", "status": "passed", "start": 1673002782057, "stop": 1673002782659}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1673002782659, "stop": 1673002782659}, {"name": "构建交易——instructions", "status": "passed", "start": 1673002782659, "stop": 1673002790964}, {"name": "rebuild交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Safe/Test_rebuild_maxfee.py\", line 107, in test_custodial\n    assert rebuild.status_code == 200\n"}, "start": 1673002790964, "stop": 1673002791359}], "attachments": [{"name": "log", "source": "d15800fa-d647-4769-9270-55793b304aa2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI safe账户转账 nativecoin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_add", "value": "'0x9D055026eB8D83eF561D5D8084F2DD02e7AD2C17'"}, {"name": "to_add", "value": "'0xa7a9e710f9a3b4184d4f8b7d379cec262f2382c2'"}, {"name": "amount", "value": "'0.00012'"}], "start": 1673002781473, "stop": 1673002791360, "uuid": "c9f77791-c877-45f6-acfb-533b2f4437b2", "historyId": "8be118554751d59fbe1e2a0653c0be2b", "testCaseId": "5c42ba23c8c2a5575f4b076353d8b66c", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_rebuild_maxfee.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "Test_rebuild_maxfee"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "17283-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_rebuild_maxfee"}]}