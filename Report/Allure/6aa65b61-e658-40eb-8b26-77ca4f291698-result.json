{"name": "GOERLI extarnal账户转账 erc20coin", "status": "broken", "statusDetails": {"message": "TypeError: privkey must be composed of 32 bytes", "trace": "self = <test_success.Test_transfers_success object at 0x102cd9d90>, test_title = 'GOERLI extarnal账户转账 erc20coin'\nnetworkCode = 'GOERLI', symbol = 'USDCC', privatekey = '', from_add = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'\nto_add = '0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2', amount = '0.000123'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"查询账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n>                   \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n\nTestcase/Test_Cloud/Test_Instructions/Test_External/test_success.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon/Conf.py:80: in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <secp256k1.PrivateKey object at 0x1023ae370>, privkey = b'', raw = True\n\n    def __init__(self, privkey=None, raw=True):\n        self.pubkey = None\n        self.private_key = None\n        if privkey is None:\n            self.set_raw_privkey(_gen_private_key())\n        else:\n            if raw:\n                if not isinstance(privkey, bytes) or len(privkey) != 32:\n>                   raise TypeError('privkey must be composed of 32 bytes')\nE                   TypeError: privkey must be composed of 32 bytes\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py:275: TypeError"}, "steps": [{"name": "查询账户holder信息", "status": "passed", "start": 1670997902781, "stop": 1670997902998}, {"name": "构建交易——instructions", "status": "broken", "statusDetails": {"message": "TypeError: privkey must be composed of 32 bytes\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Instructions/Test_External/test_success.py\", line 69, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey,hash)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 80, in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py\", line 275, in __init__\n    raise TypeError('privkey must be composed of 32 bytes')\n"}, "start": 1670997902998, "stop": 1670997905288}], "attachments": [{"name": "log", "source": "389d7647-bbee-42fa-9b99-ffd1f92531e3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI extarnal账户转账 erc20coin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'USDCC'"}, {"name": "privatekey", "value": "''"}, {"name": "from_add", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "to_add", "value": "'0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'"}, {"name": "amount", "value": "'0.000123'"}], "start": 1670997902781, "stop": 1670997905292, "uuid": "5098287e-1738-49af-b8be-0a70bacc003f", "historyId": "c4dcc92c00e3ab1aa75510c768f97bc5", "testCaseId": "8c938ee78d0f0bc04611c3a664f2e6c4", "fullName": "Testcase.Test_Cloud.Test_Instructions.Test_External.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Custodial Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Instructions.Test_External"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "1351-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Instructions.Test_External.test_success"}]}