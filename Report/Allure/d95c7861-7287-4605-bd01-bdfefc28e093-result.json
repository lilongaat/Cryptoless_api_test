{"name": "MATIC多签账户转账nativecoin", "status": "broken", "statusDetails": {"message": "Exception: digest function must produce 256 bits", "trace": "self = <test_safe_success.Test_transfer_success object at 0x1120b0130>, test_title = 'MATIC多签账户转账nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = ['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']\nnetworkCode = 'MATIC', symbol = 'MATIC', fromaddress = '0x6490C1b13A4576128159576F9d3acadF79e8dd6f'\ntoaddress = '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', amount = '0.0001'\n\n    @allure.story(\"Transfer Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,publickey,networkCode,symbol,,fromaddress,toaddress,amount', test_data)\n    def test_custodial(self,test_title,privatekey,publickey,networkCode,symbol,fromaddress,toaddress,amount):\n    \n        with allure.step(\"Instruction交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"body\": {\n                        \"from\": fromaddress,\n                        \"to\": toaddress,\n                        \"symbol\":symbol,\n                        \"amount\": amount\n                    },\n                    \"type\": \"TRANSFER\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_instructions(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            hash = ts.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"][0]['hash']\n            publicKey = ts.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"][0]['publicKeys'][0]\n            signatures = [{\n                \"hash\":hash,\n                \"publicKey\":publicKey,\n                \"signature\":Conf.Config.sign(privatekey[0],hash)\n            }]\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n            assert sign.status_code == 200\n            id_ = sign.json()[\"id\"]\n            hash_ = sign.json()[\"hash\"]\n            # publicKey_ = sign.json()[\"publicKeys\"][0]\n    \n            signatures_ = [{\n                        \"hash\":hash_,\n                        \"publicKey\":publicKey[1],\n>                       \"signature\":Conf.Config.sign(privatekey[1],hash_)\n    \n                    }]\n\nTestcasecore/Test_Instructions/Test_transfer/Test_EVM/test_safe_success.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon/Conf.py:84: in sign\n    sig = privkey.ecdsa_sign_recoverable(msg, raw=True)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py:350: in ecdsa_sign_recoverable\n    msg32 = _hash32(msg, raw, digest)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmsg = b'', raw = True, digest = <built-in function openssl_sha256>\n\n    def _hash32(msg, raw, digest):\n        if not raw:\n            msg32 = digest(msg).digest()\n        else:\n            msg32 = msg\n        if len(msg32) * 8 != 256:\n>           raise Exception(\"digest function must produce 256 bits\")\nE           Exception: digest function must produce 256 bits\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py:397: Exception"}, "steps": [{"name": "Instruction交易", "status": "passed", "start": 1670489826675, "stop": 1670489828240}, {"name": "Sign交易", "status": "broken", "statusDetails": {"message": "Exception: digest function must produce 256 bits\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Instructions/Test_transfer/Test_EVM/test_safe_success.py\", line 70, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey[1],hash_)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 84, in sign\n    sig = privkey.ecdsa_sign_recoverable(msg, raw=True)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py\", line 350, in ecdsa_sign_recoverable\n    msg32 = _hash32(msg, raw, digest)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py\", line 397, in _hash32\n    raise Exception(\"digest function must produce 256 bits\")\n"}, "start": 1670489828240, "stop": 1670489831205}], "attachments": [{"name": "log", "source": "53dc4ae4-7823-4761-8273-0437404df81d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC多签账户转账nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "symbol", "value": "'MATIC'"}, {"name": "fromaddress", "value": "'0x6490C1b13A4576128159576F9d3acadF79e8dd6f'"}, {"name": "toaddress", "value": "'0xe525e7cd17f6dc950492755a089e452fd5d9d44f'"}, {"name": "amount", "value": "'0.0001'"}], "start": 1670489826675, "stop": 1670489831209, "uuid": "011b9c48-76fe-44e6-a524-5d775e07d42f", "historyId": "259201eb2f69473744f25d2c9f54f173", "testCaseId": "5344654084307d5bf1cb9781ac31c676", "fullName": "Testcasecore.Test_Instructions.Test_transfer.Test_EVM.test_safe_success.Test_transfer_success#test_custodial", "labels": [{"name": "feature", "value": "Transfer Success!"}, {"name": "story", "value": "Transfer Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Instructions.Test_transfer.Test_EVM"}, {"name": "suite", "value": "test_safe_success"}, {"name": "subSuite", "value": "Test_transfer_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "19664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Instructions.Test_transfer.Test_EVM.test_safe_success"}]}