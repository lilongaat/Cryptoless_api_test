{"name": "MATIC多签账户批量转账nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_batch_safe_success.Test_transfer_success object at 0x105674940>, test_title = 'MATIC多签账户批量转账nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = ['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']\nnetworkCode = 'MATIC', address_send = '0xe525e7cd17f6dc950492755a089e452fd5d9d44f'\nfromaddress = '0x6490C1b13A4576128159576F9d3acadF79e8dd6f'\ntoaddress = ['0xe525e7cd17f6dc950492755a089e452fd5d9d44f', '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', '0xe525e7cd17f6dc950492755a089e452fd5d9d44f']\nvalue = ['0x0', '0x64', '0xc8']\n\n    @allure.story(\"Transfer Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,publickey,networkCode,address_send,fromaddress,toaddress,value', test_data)\n    def test_custodial(self,test_title,privatekey,publickey,networkCode,address_send,fromaddress,toaddress,value):\n    \n        with allure.step(\"Build交易\"):\n            calls = []\n            for i in range(len(toaddress)):\n                call = {\n                    \"to\":toaddress[i],\n                    \"value\":value[i]\n                }\n                calls.append(call)\n    \n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": address_send,\n                        \"safeMultiInputRequest\": {\n                            \"contract\": fromaddress,\n                            \"participants\": publickey,\n                            \"calls\": calls,\n                        }\n                    },\n                    \"type\": \"SAFE_MULTISEND_TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"]\n                for j in range(len(publickey)):\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey[j],\n                        \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Httpcore.HttpCoreUtils.core_send(id)\n>           assert send.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_batch_safe_success.py:78: AssertionError"}, "steps": [{"name": "Build交易", "status": "passed", "start": 1670233110662, "stop": 1670233111392}, {"name": "Sign交易", "status": "passed", "start": 1670233111392, "stop": 1670233113336}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Transactions/Test_Transfer/Test_Transfer_EVM/test_batch_safe_success.py\", line 78, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1670233113336, "stop": 1670233113558}], "attachments": [{"name": "log", "source": "d1443d48-436d-4758-b38c-21d565fda308-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC多签账户批量转账nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "address_send", "value": "'0xe525e7cd17f6dc950492755a089e452fd5d9d44f'"}, {"name": "fromaddress", "value": "'0x6490C1b13A4576128159576F9d3acadF79e8dd6f'"}, {"name": "toaddress", "value": "['0xe525e7cd17f6dc950492755a089e452fd5d9d44f', '0xe525e7cd17f6dc950492755a089e452fd5d9d44f', '0xe525e7cd17f6dc950492755a089e452fd5d9d44f']"}, {"name": "value", "value": "['0x0', '0x64', '0xc8']"}], "start": 1670233110662, "stop": 1670233113559, "uuid": "b59f8658-822c-48f9-a15d-912e1ca22640", "historyId": "add3ea4c2310cb43fdd596dabe3d6332", "testCaseId": "1349f2d3b06f2a9b72fb6c9a1e32e1f9", "fullName": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_batch_safe_success.Test_transfer_success#test_custodial", "labels": [{"name": "feature", "value": "Transfer Success!"}, {"name": "story", "value": "Transfer Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM"}, {"name": "suite", "value": "test_batch_safe_success"}, {"name": "subSuite", "value": "Test_transfer_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6538-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Transactions.Test_Transfer.Test_Transfer_EVM.test_batch_safe_success"}]}