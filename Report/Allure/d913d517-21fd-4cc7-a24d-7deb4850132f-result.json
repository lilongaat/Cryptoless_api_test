{"name": "IRIS safe账户转账", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "self = <test_transfer_safe_success.Test_transfers_success object at 0x101be02e0>, test_title = 'IRIS safe账户转账'\nnetworkCode = 'IRIS', symbol = 'IRIS'\nprivatekey = 'a8cb5ffed23dda8a84d2612b5b7f17a7739b208640a3cc04b1b28cd4239fcd0c'\nfrom_add = 'iaa1mzan97ku09tyv3wcu5lktfwzrqfskal4eezv4j', to_add = 'iaa15h0lvaa6slvj0hg4d64548j2c5fds2zv8tkvgs'\namount = '0.000107'\n\n    @allure.story(\"Safe Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            # assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n            assert send.status_code == 200\n            assert send.json()[\"statusDesc\"] == \"PENDING\"\n    \n            hash = send.json()[\"hash\"]\n    \n    \n        # logger.error(\"\\n\\n\"+networkCode+\"--\"+symbol+\"--\"+test_title+\"\\n\"+from_add+\"--\"+quantity+\"\\n\"+hash+\"\\n\\n\")\n    \n        with allure.step(\"通过id查询交易记录\"):\n            sleep(30)\n            for n in range(10):\n                transaction = Http.HttpUtils.transactions_byid(id)\n                assert transaction.status_code == 200\n                statusDesc = transaction.json()[\"statusDesc\"]\n                if statusDesc == \"SETTLED\" and len(transaction.json()[\"balanceChanges\"]) > 0:\n                    break\n                else:\n                    sleep(30)\n            sleep(5)\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n>           assert holder.status_code ==200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/test_transfer_safe_success.py:151: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1675335740957, "stop": 1675335742804}, {"name": "查询from账户holder信息", "status": "passed", "start": 1675335742804, "stop": 1675335743033}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1675335743034, "stop": 1675335743034}, {"name": "构建交易——instructions", "status": "passed", "start": 1675335743034, "stop": 1675335744445}, {"name": "签名交易", "status": "passed", "start": 1675335744445, "stop": 1675335745157}, {"name": "广播交易", "status": "passed", "start": 1675335745157, "stop": 1675335752132}, {"name": "通过id查询交易记录", "status": "passed", "start": 1675335752132, "stop": 1675335787471}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1675335787471, "stop": 1675335789186}, {"name": "查询from账户holder信息", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Safe/test_transfer_safe_success.py\", line 151, in test_custodial\n    assert holder.status_code ==200\n"}, "start": 1675335789186, "stop": 1675335789419}], "attachments": [{"name": "log", "source": "eec2d810-df8a-42a0-9392-5006b849c096-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'IRIS safe账户转账'"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "privatekey", "value": "'a8cb5ffed23dda8a84d2612b5b7f17a7739b208640a3cc04b1b28cd4239fcd0c'"}, {"name": "from_add", "value": "'iaa1mzan97ku09tyv3wcu5lktfwzrqfskal4eezv4j'"}, {"name": "to_add", "value": "'iaa15h0lvaa6slvj0hg4d64548j2c5fds2zv8tkvgs'"}, {"name": "amount", "value": "'0.000107'"}], "start": 1675335740957, "stop": 1675335789423, "uuid": "aba9b890-1fb3-40e0-98dd-9345bcb0f6e0", "historyId": "04ca7329a8a9e3a607382f0927c16592", "testCaseId": "5e06a0d119d297ad117f7f843b7cae1b", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_transfer_safe_success.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers!"}, {"name": "story", "value": "Safe Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "test_transfer_safe_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "19313-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_transfer_safe_success"}]}