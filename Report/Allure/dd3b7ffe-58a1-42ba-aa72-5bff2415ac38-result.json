{"name": "External账户Goerli转账", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'url' referenced before assignment", "trace": "self = <test_success_sc.Test_transfers_success object at 0x10ec1b6a0>, test_title = 'External账户Goerli转账'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'], networkCode = 'GOERLI', symbol = 'GoerliETH'\nfrom_add = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', to_add = '0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650', amount = '0.0000002'\n\n    @allure.story(\"External_Transfers_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_external(self,test_title,privatekey,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"查询From账户holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,from_add)\n            assert holders.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"from\":from_add,\n                \"to\":to_add,\n                \"symbol\":symbol,\n                \"amount\":amount\n            }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            transfer = Http.HttpUtils.instructions(\"transfer\",body,networkCode,[],transactionParams)\n    \n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"BUILDING\"\n            assert transfer.json()[\"body\"][\"symbol\"] == symbol\n            assert transfer.json()[\"body\"][\"amount\"] == amount\n            assert transfer.json()[\"body\"][\"from\"] == from_add\n            assert transfer.json()[\"body\"][\"to\"] == to_add\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = transfer.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——instructions\"):\n>           sign = Http.HttpUtils.sign(id,signatures,serialized)\n\nTestcase/Test_Instructions/Test_Transfer/Test_External/test_success_sc.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nid = '1585529575265685505'\nsignatures = [{'hash': '0b9628170247a838b63f0dc451f07a3df3623eca1f7cca53752891fb171e3c44', 'publicKey': '0244fb46bba2e912f26a73126b...b93e995b6bb7d2e1ee22a286fe50509323b275d14c206acd382f91fc3223fb68e3885c6c3a92e3c14502f896ef8a34bf646c2528dfa95c736b01'}]\nserialized = 'e901851329b8144e825208942b0efcf16ec1e4c5ed82dbb4fce9b4811485e650852e90edd00080808080'\nAuthorization = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTg1MTAyNzkxNDY2NDg3ODEwIiwiZXhwIjoxNjk4Mjg4OTM1LCJpYXQiOjE2NjY3NTI5MzUsInVzZXJJZCI6MTU4NTEwMjc5MTQ2NjQ4NzgxMH0.4o43r1upI2Qzcs46wf3gqb2Kq6kq0I7qGST6qPspfjY'\n\n    @staticmethod\n    # sign\n    def sign(id: str, signatures: list, serialized: str, Authorization=token):\n>       url = url + \"/vault/transactions/\" + id + \"/signatures\"\nE       UnboundLocalError: local variable 'url' referenced before assignment\n\nCommon/Http.py:447: UnboundLocalError"}, "steps": [{"name": "查询From账户holders信息——holders", "status": "passed", "start": 1666854679061, "stop": 1666854679517}, {"name": "构建交易——instructions", "status": "passed", "start": 1666854679517, "stop": 1666854682940}, {"name": "签名交易——instructions", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'url' referenced before assignment\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Transfer/Test_External/test_success_sc.py\", line 93, in test_external\n    sign = Http.HttpUtils.sign(id,signatures,serialized)\n  File \"/Users/lilong/Documents/Test_Api/Common/Http.py\", line 447, in sign\n    url = url + \"/vault/transactions/\" + id + \"/signatures\"\n"}, "start": 1666854682940, "stop": 1666854682940}], "attachments": [{"name": "log", "source": "f46223e6-88c5-4663-be42-bb5286af7126-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'External账户Goerli转账'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "from_add", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "to_add", "value": "'0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650'"}, {"name": "amount", "value": "'0.0000002'"}], "start": 1666854679061, "stop": 1666854682941, "uuid": "f9b7a806-911d-4ddd-8a5f-28fcc99940b8", "historyId": "c58a6891749a026da1df1c0a5ebd6eae", "testCaseId": "5c8836d9e995bafea54f764b918426cd", "fullName": "Testcase.Test_Instructions.Test_Transfer.Test_External.test_success_sc.Test_transfers_success#test_external", "labels": [{"name": "story", "value": "External_Transfers_Success!"}, {"name": "feature", "value": "Transfers_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Transfer.Test_External"}, {"name": "suite", "value": "test_success_sc"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "41010-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Transfer.Test_External.test_success_sc"}]}