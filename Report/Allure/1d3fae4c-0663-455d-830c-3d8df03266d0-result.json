{"name": "BTC share账户转账", "status": "broken", "statusDetails": {"message": "TypeError: privkey must be composed of 32 bytes", "trace": "self = <test_success.Test_transfers_success object at 0x10be2ed60>, test_title = 'BTC share账户转账', networkCode = 'BTC'\nsymbol = 'BTC'\nprivatekey = ['02e8852463021b47fe5214c599e87e431f2eb1219044946bbff397afd0518b85a6', '0231e263a7e95bf5107b88b85b49918841b937305cce5dae7dd7ba9b86fc460f70']\nfrom_add = 'tb1q4t8jtp4fwjg4spfjh7ux5ckhrallj652kwrj48gcvd0rt5g9ea3q4vlm33'\nto_add = 'tb1qagkvxdz2zq76atvr0rzh8n9lewjmlm25umq0xq', amount = '0.000001'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"查询账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = holder.json()[\"list\"][0][\"quantity\"]\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                for j in range(len(publickeys)):\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickeys[j],\n>                       \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n\nTestcase/Test_Cloud/Test_Instructions/Test_Share/test_success.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon/Conf.py:80: in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <secp256k1.PrivateKey object at 0x10c7465e0>\nprivkey = b'\\x02\\xe8\\x85$c\\x02\\x1bG\\xfeR\\x14\\xc5\\x99\\xe8~C\\x1f.\\xb1!\\x90D\\x94k\\xbf\\xf3\\x97\\xaf\\xd0Q\\x8b\\x85\\xa6'\nraw = True\n\n    def __init__(self, privkey=None, raw=True):\n        self.pubkey = None\n        self.private_key = None\n        if privkey is None:\n            self.set_raw_privkey(_gen_private_key())\n        else:\n            if raw:\n                if not isinstance(privkey, bytes) or len(privkey) != 32:\n>                   raise TypeError('privkey must be composed of 32 bytes')\nE                   TypeError: privkey must be composed of 32 bytes\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py:275: TypeError"}, "steps": [{"name": "查询账户holder信息", "status": "passed", "start": 1671071934995, "stop": 1671071935197}, {"name": "构建交易——instructions", "status": "broken", "statusDetails": {"message": "TypeError: privkey must be composed of 32 bytes\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Instructions/Test_Share/test_success.py\", line 70, in test_custodial\n    \"signature\":Conf.Config.sign(privatekey[j],hash)\n  File \"/Users/lilong/Documents/Test_Api/Common/Conf.py\", line 80, in sign\n    privkey = PrivateKey(bytes(bytearray.fromhex(privkey_str)), raw=True)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/secp256k1/__init__.py\", line 275, in __init__\n    raise TypeError('privkey must be composed of 32 bytes')\n"}, "start": 1671071935197, "stop": 1671071936351}], "attachments": [{"name": "log", "source": "233c5829-6317-43d1-8038-2d9ee0a7c0fe-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'BTC share账户转账'"}, {"name": "networkCode", "value": "'BTC'"}, {"name": "symbol", "value": "'BTC'"}, {"name": "privatekey", "value": "['02e8852463021b47fe5214c599e87e431f2eb1219044946bbff397afd0518b85a6', '0231e263a7e95bf5107b88b85b49918841b937305cce5dae7dd7ba9b86fc460f70']"}, {"name": "from_add", "value": "'tb1q4t8jtp4fwjg4spfjh7ux5ckhrallj652kwrj48gcvd0rt5g9ea3q4vlm33'"}, {"name": "to_add", "value": "'tb1qagkvxdz2zq76atvr0rzh8n9lewjmlm25umq0xq'"}, {"name": "amount", "value": "'0.000001'"}], "start": 1671071934995, "stop": 1671071936356, "uuid": "b263f583-20bd-4e6a-aa63-21470a759426", "historyId": "afa6144687b928a91db357ca9c21332e", "testCaseId": "91fa3504deed025d4e3e6d9b7eda00a1", "fullName": "Testcase.Test_Cloud.Test_Instructions.Test_Share.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Instructions.Test_Share"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "7653-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Instructions.Test_Share.test_success"}]}