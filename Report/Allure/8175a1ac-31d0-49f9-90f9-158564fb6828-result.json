{"name": "GOERLI share账户转账 nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_native_success.Test_transfers_success object at 0x110b51a00>, test_title = 'GOERLI share账户转账 nativecoin'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = ['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']\nnetworkCode = 'GOERLI', symbol = 'goerliETH', from_add = '0x24ca55d569ca99ae648949147ccb3e0024ec1098'\nto_adds = ['0x24ca55d569ca99ae648949147ccb3e0024ec1098'], values = ['0x64']\n\n    @allure.story(\"Safe Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,publickey,networkCode,symbol,from_add,to_adds,values', test_data)\n    def test_safe(self,test_title,privatekey,publickey,networkCode,symbol,from_add,to_adds,values):\n    \n        if len(to_adds) == 1: #普通转账\n            payload = {\n                \"from\":from_add,\n                \"to\":to_adds[0],\n                \"value\":values[0]\n                }\n            type = \"TRANSACTION\"\n        elif len(to_adds) > 1: #批量转账\n            calls =[]\n            for i in range(len(to_adds)):\n                call = {\n                    \"to\":to_adds[i],\n                    \"value\":values[i]\n                }\n                calls.append(call)\n    \n            payload = {\n                \"from\":from_add,\n                \"calls\":calls\n                }\n            type = \"MULTISEND_TRANSACTION\"\n    \n    \n        with allure.step(\"构建交易——transactions\"):\n                body = {\n                    \"networkCode\":networkCode,\n                    \"payload\":payload,\n                    \"type\":type\n                }\n                transfer = Http.HttpUtils.transactions(body)\n                assert transfer.status_code == 200\n                assert transfer.json()[\"statusDesc\"] == \"BUILDING\"\n    \n                id = transfer.json()[\"id\"]\n                requiredSignings = transfer.json()[\"requiredSignings\"]\n    \n                signatures = []\n                for i in range(len(requiredSignings)):\n                    hash = requiredSignings[i][\"hash\"]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":requiredSignings[i][\"publicKeys\"][i],\n                        \"signature\":Conf.Config.sign(privatekey[i],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign = Http.HttpUtils.sign(id,signatures)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Transactions/Test_Share/Test_EVM/test_native_success.py:82: AssertionError"}, "steps": [{"name": "构建交易——transactions", "status": "passed", "start": 1670925601304, "stop": 1670925604103}, {"name": "签名交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transactions/Test_Share/Test_EVM/test_native_success.py\", line 82, in test_safe\n    assert sign.status_code == 200\n"}, "start": 1670925604103, "stop": 1670925604297}], "attachments": [{"name": "log", "source": "edb963dc-8fae-4498-b3b1-6f25060e326d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI share账户转账 nativecoin'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'goerliETH'"}, {"name": "from_add", "value": "'0x24ca55d569ca99ae648949147ccb3e0024ec1098'"}, {"name": "to_adds", "value": "['0x24ca55d569ca99ae648949147ccb3e0024ec1098']"}, {"name": "values", "value": "['0x64']"}], "start": 1670925601303, "stop": 1670925604313, "uuid": "d731e123-ec15-4426-8a94-88f55d9e5b6e", "historyId": "2e575827425ab99dae2cd208cb482d4c", "testCaseId": "161b24e9e5d52db9beda0f8d8eda38cf", "fullName": "Testcase.Test_Cloud.Test_Transactions.Test_Share.Test_EVM.test_native_success.Test_transfers_success#test_safe", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Safe Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transactions.Test_Share.Test_EVM"}, {"name": "suite", "value": "test_native_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "17008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transactions.Test_Share.Test_EVM.test_native_success"}]}