{"name": "Safe2-3账户MATIC转账", "status": "broken", "statusDetails": {"message": "Exception: 请求异常", "trace": "self = <test_success_sc.Test_transfers_success object at 0x10d3e0a00>, test_title = 'Safe2-3账户MATIC转账'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'], networkCode = 'MATIC', symbol = 'MATIC'\nfrom_add = '0x1037477a2e863DA6f242ee06E106E8116857bF6E', to_add = '0xDBA67bAa3CA1e89a2BDf0fEeE4592595b130888A', amount = '0.0000008'\n\n    @allure.story(\"Safe_Transfers_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_safe(self,test_title,privatekey,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"查询From账户holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,from_add)\n            assert holders.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"from\":from_add,\n                \"to\":to_add,\n                \"symbol\":symbol,\n                \"amount\":amount\n            }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            transfer = Http.HttpUtils.instructions(\"transfer\",body,networkCode,[],transactionParams)\n    \n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"BUILDING\"\n            assert transfer.json()[\"body\"][\"symbol\"] == symbol\n            assert transfer.json()[\"body\"][\"amount\"] == amount\n            assert transfer.json()[\"body\"][\"from\"] == from_add\n            assert transfer.json()[\"body\"][\"to\"] == to_add\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = transfer.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——sign\"):\n>           sign = Http.HttpUtils.sign(id,signatures,serialized)\n\nTestcase/Test_Instructions/Test_Transfer/Test_Safe/test_success_sc.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nid = '1588123258599219201'\nsignatures = [{'hash': 'b78f06fc0d00b0b443e53244bbc7565071caba61e3bae1bd94868625b2f253cd', 'publicKey': '0244fb46bba2e912f26a73126b...b6ff8078c36904d947af3842f895bbd8c781a05920a80419b43a0495bba2fb60ef9929d0a6f473f675dbbe92d61cd38b5317904b6f24c5cd9700'}]\nserialized = '6a761202000000000000000000000000dba67baa3ca1e89a2bdf0feee4592595b130888a000000000000000000000000000000000000000000000...0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nAuthorization = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTg1MTAyNzkxNDY2NDg3ODEwIiwiZXhwIjoxNjk4Mjg4OTM1LCJpYXQiOjE2NjY3NTI5MzUsInVzZXJJZCI6MTU4NTEwMjc5MTQ2NjQ4NzgxMH0.4o43r1upI2Qzcs46wf3gqb2Kq6kq0I7qGST6qPspfjY'\n\n    @staticmethod\n    # sign\n    def sign(id: str, signatures: list, serialized: str, Authorization=token):\n        url = url_ + \"/vault/transactions/\" + id + \"/signatures\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": Authorization\n        }\n        body = {\n            \"signatures\":signatures,\n            \"serialized\": serialized\n        }\n        logger.info('\\n'+\"<-----Sign----->\"+\"\\n\"+\"Url:\"+url+'\\n\\n'+'Headers:'+json.dumps(headers)+'\\n\\n'+'Body:'+json.dumps(body))\n    \n        res = requests.post(url=url, json=body, headers=headers, timeout=timeout_)\n        if res.status_code == 200:\n            logger.info('\\n'+\"<-----Sign Response----->\"+\"\\n\"+(res.text))\n            return res\n        else:\n            logger.info('\\n'+\"<-----Sign Response Error----->\"+\"\\n\"+str(res.status_code)+\"\\n\"+(res.text))\n>           raise Exception(\"请求异常\")\nE           Exception: 请求异常\n\nCommon/Http.py:464: Exception"}, "steps": [{"name": "查询From账户holders信息——holders", "status": "passed", "start": 1667473062519, "stop": 1667473063647}, {"name": "构建交易——instructions", "status": "passed", "start": 1667473063647, "stop": 1667473067995}, {"name": "签名交易——sign", "status": "broken", "statusDetails": {"message": "Exception: 请求异常\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Transfer/Test_Safe/test_success_sc.py\", line 108, in test_safe\n    sign = Http.HttpUtils.sign(id,signatures,serialized)\n  File \"/Users/lilong/Documents/Test_Api/Common/Http.py\", line 464, in sign\n    raise Exception(\"请求异常\")\n"}, "start": 1667473067995, "stop": 1667473072493}], "attachments": [{"name": "log", "source": "ed850383-675a-42b3-8ab2-7893f76b842d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Safe2-3账户MATIC转账'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da']"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "symbol", "value": "'MATIC'"}, {"name": "from_add", "value": "'0x1037477a2e863DA6f242ee06E106E8116857bF6E'"}, {"name": "to_add", "value": "'0xDBA67bAa3CA1e89a2BDf0fEeE4592595b130888A'"}, {"name": "amount", "value": "'0.0000008'"}], "start": 1667473062518, "stop": 1667473072496, "uuid": "f9be342e-cf16-459d-8814-c933e0a38db7", "historyId": "b59679be3fc0f831ef0b704f8f908c4d", "testCaseId": "6f6e1392973c6d42d0a901a18984d352", "fullName": "Testcase.Test_Instructions.Test_Transfer.Test_Safe.test_success_sc.Test_transfers_success#test_safe", "labels": [{"name": "story", "value": "Safe_Transfers_Success!"}, {"name": "feature", "value": "Transfers_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "test_success_sc"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "6732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Transfer.Test_Safe.test_success_sc"}]}