{"name": "MATIC 2-2share账户转账 erc20coin", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_sign_success.Test_transfers_success object at 0x109a5a940>, test_title = 'MATIC 2-2share账户转账 erc20coin'\nnetworkCode = 'MATIC', symbol = 'USDC'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\nfrom_add = '0xa374f6ac3df090035f9a3b0993b5eeddad29b949', to_add = '0x3d7f18ad2cea9b59e54dfaf09b327c1ccd899591'\namount = '0.000123'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickeys[0],\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"第一次签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n            assert sign.json()[\"statusDesc\"] == \"SIGNING\"\n    \n            requiredSignings = sign.json()[\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickeys = requiredSignings[i][\"publicKeys\"]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickeys[1],\n                    \"signature\":Conf.Config.sign(privatekey[1],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"第二次签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n            assert sign.json()[\"statusDesc\"] == \"SIGNED\"\n    \n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n>           assert send.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcase/Test_Cloud/Test_Transfer/Test_Share/test_sign_success.py:114: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672991865084, "stop": 1672991866436}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672991866436, "stop": 1672991866743}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672991866743, "stop": 1672991866743}, {"name": "构建交易——instructions", "status": "passed", "start": 1672991866743, "stop": 1672991870543}, {"name": "第一次签名交易", "status": "passed", "start": 1672991870543, "stop": 1672991871003}, {"name": "第二次签名交易", "status": "passed", "start": 1672991871003, "stop": 1672991874207}, {"name": "广播交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Share/test_sign_success.py\", line 114, in test_custodial\n    assert send.status_code == 200\n"}, "start": 1672991874207, "stop": 1672991874934}], "attachments": [{"name": "log", "source": "24dc8a39-4312-46e9-859f-9cb2f946415d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC 2-2share账户转账 erc20coin'"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "symbol", "value": "'USDC'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "from_add", "value": "'0xa374f6ac3df090035f9a3b0993b5eeddad29b949'"}, {"name": "to_add", "value": "'0x3d7f18ad2cea9b59e54dfaf09b327c1ccd899591'"}, {"name": "amount", "value": "'0.000123'"}], "start": 1672991865084, "stop": 1672991874934, "uuid": "32e8b62f-0501-49cf-a776-27e13aa2b4c3", "historyId": "5e17f76a80771ec9b6d59618916410e9", "testCaseId": "0fbdfd73e4b5f9bafaddbe1fc0060d1d", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_sign_success.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Custodial Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share"}, {"name": "suite", "value": "test_sign_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "15642-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Share.test_sign_success"}]}