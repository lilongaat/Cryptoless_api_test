{"name": "GOERLI 多safe账户构建+签名交易后同时广播", "status": "broken", "statusDetails": {"message": "TypeError: 'Logger' object is not callable", "trace": "self = <Test_Relay_Nonce.Test_transfers_success object at 0x10d2f4460>, test_title = 'GOERLI 多safe账户构建+签名交易后同时广播'\nnetworkCode = 'GOERLI', symbol = 'GoerliETH'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_adds = ['0xf4c4b7803447dc6d3a00ed765e10fdb1bfa1ec23', '0xacd5c6a98407469856b47d333309ed814fc64ebe', '0x1dc8b303498e3fe1b4cc6f5ecf3b2976eaceae36']\nto_add = '0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650', amount = '0.00000004'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_adds,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_adds,to_add,amount):\n    \n        ids = []\n        for n in range(len(from_adds)):\n    \n            with allure.step(\"浏览器查询from账户balance信息\"):\n                balance = Httpexplore.Balances_explore.query(networkCode,from_adds[n],symbol)\n    \n            with allure.step(\"查询from账户holder信息\"):\n                holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_adds[n])\n                assert holder.status_code ==200\n                quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n            logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n            logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n            with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n                assert balance == quantity\n    \n            with allure.step(\"构建交易——instructions\"):\n                body = {\n                    \"networkCode\":networkCode,\n                    \"type\":\"transfer\",\n                    \"body\":{\n                        \"from\":from_adds[n],\n                        \"to\":to_add,\n                        \"symbol\":symbol,\n                        \"amount\":amount\n                    },\n                    \"transactionParams\":{\n                        \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                    }\n                }\n                transfer = Http.HttpUtils.instructions(body)\n                assert transfer.status_code == 200\n                # assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNING\"\n    \n                id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n                requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n                signatures = []\n                for i in range(len(requiredSignings)):\n                    hash = requiredSignings[i][\"hash\"]\n                    publickey = requiredSignings[i][\"publicKeys\"][0]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                    }\n                    signatures.append(signature)\n    \n            with allure.step(\"签名交易\"):\n                sign  =Http.HttpUtils.sign(id,signatures)\n                assert sign.status_code == 200\n                ids.append(id)\n    \n>       logger(ids)\nE       TypeError: 'Logger' object is not callable\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/Test_Relay_Nonce.py:94: TypeError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672994918339, "stop": 1672994918733}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672994918733, "stop": 1672994919003}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672994919003, "stop": 1672994919003}, {"name": "构建交易——instructions", "status": "passed", "start": 1672994919003, "stop": 1672994926527}, {"name": "签名交易", "status": "passed", "start": 1672994926527, "stop": 1672994931564}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672994931564, "stop": 1672994932061}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672994932061, "stop": 1672994932465}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672994932466, "stop": 1672994932466}, {"name": "构建交易——instructions", "status": "passed", "start": 1672994932466, "stop": 1672994941990}, {"name": "签名交易", "status": "passed", "start": 1672994941990, "stop": 1672994946499}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672994946499, "stop": 1672994947012}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672994947012, "stop": 1672994947416}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672994947417, "stop": 1672994947417}, {"name": "构建交易——instructions", "status": "passed", "start": 1672994947417, "stop": 1672994957052}, {"name": "签名交易", "status": "passed", "start": 1672994957053, "stop": 1672994960830}], "attachments": [{"name": "log", "source": "89e126a0-925e-4a0c-a202-14f216b29c55-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI 多safe账户构建+签名交易后同时广播'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_adds", "value": "['0xf4c4b7803447dc6d3a00ed765e10fdb1bfa1ec23', '0xacd5c6a98407469856b47d333309ed814fc64ebe', '0x1dc8b303498e3fe1b4cc6f5ecf3b2976eaceae36']"}, {"name": "to_add", "value": "'0x2B0EfCF16EC1E4C5eD82dBB4Fce9B4811485e650'"}, {"name": "amount", "value": "'0.00000004'"}], "start": 1672994918338, "stop": 1672994960830, "uuid": "a74715f5-d98f-451c-b4b2-30c1be1ffa6c", "historyId": "ac7971fcd48997eed5dae7fd5c61fe6b", "testCaseId": "aefed52ddc727ea6f398e08d74f5e493", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_Relay_Nonce.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "Test_Relay_Nonce"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "16144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.Test_Relay_Nonce"}]}