{"name": "GOERLI extarnal账户转账 nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.012581181216070069') == Decimal('0.012941346238292069')", "trace": "self = <test_success.Test_transfers_success object at 0x1042e7b80>, test_title = 'GOERLI extarnal账户转账 nativecoin'\nnetworkCode = 'GOERLI', symbol = 'GoerliETH'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_add = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f', to_add = '0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'\namount = '0.000121'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"BUILDING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n            assert send.status_code == 200\n            assert send.json()[\"statusDesc\"] == \"PENDING\"\n    \n        with allure.step(\"通过id查询交易记录\"):\n            sleep(30)\n            for n in range(10):\n                transaction = Http.HttpUtils.transactions_byid(id)\n                assert transaction.status_code == 200\n                statusDesc = transaction.json()[\"statusDesc\"]\n                if statusDesc == \"SETTLED\" and len(transaction.json()[\"balanceChanges\"]) > 0:\n                    break\n                else:\n                    sleep(30)\n            sleep(5)\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n>           assert balance == quantity\nE           AssertionError: assert Decimal('0.012581181216070069') == Decimal('0.012941346238292069')\n\nTestcase/Test_Cloud/Test_Transfer/Test_External/test_success.py:157: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1673000668420, "stop": 1673000668979}, {"name": "查询from账户holder信息", "status": "passed", "start": 1673000668979, "stop": 1673000669424}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1673000669424, "stop": 1673000669424}, {"name": "构建交易——instructions", "status": "passed", "start": 1673000669425, "stop": 1673000675840}, {"name": "签名交易", "status": "passed", "start": 1673000675840, "stop": 1673000676638}, {"name": "广播交易", "status": "passed", "start": 1673000676638, "stop": 1673000678110}, {"name": "通过id查询交易记录", "status": "passed", "start": 1673000678110, "stop": 1673000777487}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1673000777488, "stop": 1673000777934}, {"name": "查询from账户holder信息", "status": "passed", "start": 1673000777934, "stop": 1673000778249}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.012581181216070069') == Decimal('0.012941346238292069')\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_External/test_success.py\", line 157, in test_custodial\n    assert balance == quantity\n"}, "start": 1673000778250, "stop": 1673000778251}], "attachments": [{"name": "log", "source": "709d9dca-adf4-42b1-9c6a-54a8b74edbb5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'GOERLI extarnal账户转账 nativecoin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'GoerliETH'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_add", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}, {"name": "to_add", "value": "'0xa7A9E710f9A3B4184D4F8B7d379CEC262f2382c2'"}, {"name": "amount", "value": "'0.000121'"}], "start": 1673000668420, "stop": 1673000778253, "uuid": "a2dcb207-df63-4934-9207-e9905a55c376", "historyId": "79c26eca66164acf49e99319068e23bc", "testCaseId": "2d895effda5c005c5782d6bc35b24852", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_External.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "feature", "value": "Transfers Success!"}, {"name": "story", "value": "Custodial Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_External"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "16915-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_External.test_success"}]}