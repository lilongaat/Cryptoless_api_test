{"name": "MATIC创建多签账户并激活", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_create_relay_active.Test_account_success object at 0x111c63b50>, test_title = 'MATIC创建多签账户并激活', networkCode = 'MATIC'\nprivatekey = ['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']\npublickey = ['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']\nthreshold = '2', privatekey_relay = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\npublickey_relay = '0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113'\naddress_relay = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'\n\n    @allure.story(\"Account Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,privatekey,publickey,threshold,privatekey_relay,publickey_relay,address_relay,', test_data)\n    def test_custodial(self,test_title,networkCode,privatekey,publickey,threshold,privatekey_relay,publickey_relay,address_relay):\n    \n        with allure.step(\"创建多签账户\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"publicKeys\":publickey,\n                \"threshold\":threshold\n            }\n            safeacc = Httpcore.HttpCoreUtils.core_create_account(body)\n            assert safeacc.status_code == 200\n            safeaddress = safeacc.json()[\"address\"]\n    \n        with allure.step(\"Build交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": address_relay,\n                        \"safeInputRequest\": {\n                            \"contract\": safeaddress,\n                            \"participants\": publickey,\n                            \"to\" : address_relay\n                        }\n                    },\n                    \"type\": \"SAFE_RELAY_CREATION_TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                for j in range(len(requiredSignings[i][\"publicKeys\"])):\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":requiredSignings[i][\"publicKeys\"][j],\n                        \"signature\":Conf.Config.sign(privatekey[j],hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcasecore/Test_Accounts/Test_EVM/Test_Safe_Account/test_create_relay_active.py:79: AssertionError"}, "steps": [{"name": "创建多签账户", "status": "passed", "start": 1670394087797, "stop": 1670394091810}, {"name": "Build交易", "status": "passed", "start": 1670394091811, "stop": 1670394094731}, {"name": "Sign交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Accounts/Test_EVM/Test_Safe_Account/test_create_relay_active.py\", line 79, in test_custodial\n    assert sign.status_code == 200\n"}, "start": 1670394094731, "stop": 1670394097695}], "attachments": [{"name": "log", "source": "a609b68e-0da5-4348-b5af-cd9d06a4ff6c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC创建多签账户并激活'"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "privatekey", "value": "['dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da', '0fbde0fc6a050c10f98ea3fd2921d2b52780667eed2871a132b60c7aab3ff51d']"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "threshold", "value": "'2'"}, {"name": "privatekey_relay", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "publickey_relay", "value": "'0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113'"}, {"name": "address_relay", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}], "start": 1670394087797, "stop": 1670394097696, "uuid": "4ba905d1-81f6-4d73-b243-833ad66d5b7e", "historyId": "ce3aea11f6b0c74de24c6b6eccdc8deb", "testCaseId": "41d91558f0bc2258e8cb344d097e884f", "fullName": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account.test_create_relay_active.Test_account_success#test_custodial", "labels": [{"name": "feature", "value": "Account Success!"}, {"name": "story", "value": "Account Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account"}, {"name": "suite", "value": "test_create_relay_active"}, {"name": "subSuite", "value": "Test_account_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "12294-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account.test_create_relay_active"}]}