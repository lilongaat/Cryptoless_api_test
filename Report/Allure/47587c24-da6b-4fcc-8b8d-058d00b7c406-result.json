{"name": "Custodial账户IRIS质押", "status": "broken", "statusDetails": {"message": "Exception: 请求异常", "trace": "self = <test_success_repeat.Test_stake_success object at 0x1024eb250>, test_title = 'Custodial账户IRIS质押', networkCode = 'IRIS'\nsymbol = 'IRIS', type = 'stake', address = 'iaa1vywcfmff44nlhud05nlzlpw0hrlxenptn9ff7r', amount = '0.0009'\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,type,address,amount):\n    \n        # with allure.step(\"查询账户holders信息\"):\n        #     holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n        #     assert holders.status_code == 200\n    \n        # with allure.step(\"查询账户staking信息\"):\n        #     staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n        #     assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            ids = []\n            for i in range(2):\n                if type == \"claim\":\n                    body = {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                    }\n                else:\n                    body = {\n                        \"delegator\":address,\n                        \"coinSymbol\":symbol,\n                        \"amount\":amount\n                    }\n                transactionParams = {\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n                stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n                assert stake.status_code == 200\n                assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SIGNED\"\n    \n                id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n                ids.append(id)\n    \n        with allure.step(\"广播交易\"):\n            for i in range(len(ids)):\n>               send = Http.HttpUtils.send(ids[i])\n\nTestcase/Test_Instructions/Test_Stake/Test_Custodial/test_success_repeat.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nid = '1590909501330407426'\nAuthorization = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTg1MTAyNzkxNDY2NDg3ODEwIiwiZXhwIjoxNjk5NjAyNjg2LCJpYXQiOjE2NjgwNjY2ODYsInVzZXJJZCI6MTU4NTEwMjc5MTQ2NjQ4NzgxMH0.crnXQzc0JOD7wPow9R3P3-uZrJmzOeUF6WOqy5OhxqY'\n\n    @staticmethod\n    # send\n    def send(id: str, Authorization=token):\n        url = url_ + \"/vault/transactions/\" + id\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": Authorization\n        }\n    \n        logger.info('\\n'+\"<-----Send----->\"+\"\\n\"+\"Url:\"+url+'\\n\\n'+'Headers:'+json.dumps(headers)+'\\n\\n')\n    \n        res = requests.patch(url=url, headers=headers, timeout=timeout_)\n        if res.status_code == 200:\n            logger.info('\\n'+\"<-----Send Response----->\"+\"\\n\"+(res.text))\n            return res\n        else:\n            logger.info('\\n'+\"<-----Send Response Error----->\"+\"\\n\"+str(res.status_code)+\"\\n\"+(res.text))\n>           raise Exception(\"请求异常\")\nE           Exception: 请求异常\n\nCommon/Http.py:649: Exception"}, "steps": [{"name": "构建交易——instructions", "status": "passed", "start": 1668137351578, "stop": 1668137361727}, {"name": "广播交易", "status": "broken", "statusDetails": {"message": "Exception: 请求异常\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_Custodial/test_success_repeat.py\", line 83, in test_custodial\n    send = Http.HttpUtils.send(ids[i])\n  File \"/Users/lilong/Documents/Test_Api/Common/Http.py\", line 649, in send\n    raise Exception(\"请求异常\")\n"}, "start": 1668137361727, "stop": 1668137368661}], "attachments": [{"name": "log", "source": "d68e2ef8-8cf7-4465-82f9-33601468bf52-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Custodial账户IRIS质押'"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'iaa1vywcfmff44nlhud05nlzlpw0hrlxenptn9ff7r'"}, {"name": "amount", "value": "'0.0009'"}], "start": 1668137351578, "stop": 1668137368664, "uuid": "50017541-0f9e-464b-8daf-36a9519f6c55", "historyId": "189b2481dbe3c966aa07e502dea386ea", "testCaseId": "a55dd905da465c73c60e2bc31617e713", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_success_repeat.Test_stake_success#test_custodial", "labels": [{"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "feature", "value": "Stake Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial"}, {"name": "suite", "value": "test_success_repeat"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "23811-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_Custodial.test_success_repeat"}]}