{"name": "单签账户转账-正常转账!", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_transfers_success_btc.Test_transfers_success_btc object at 0x103c9ec40>\ntest_title = '正常转账!'\nprivatekey = ['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']\nPublicKeys = ['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']\nnetworkCode = 'BTC', symbol = 'BTC'\nfrom_add = 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'\nto_add = 'tb1qdy5m3m7fxdgup3hu5rmh4kg5llctp3ck6sewv7', amount = '0.000009'\n\n    @allure.story(\"Transfers_BTC_Success!\")\n    @allure.title('单签账户转账-{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_transfers_address(self,test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——transfers\"):\n            transactionParams = {\n                \"memo\":\"hahahhahahhahahhaahhahhahhahahaha@@==这是一段描述！！====@@hahahhahahhahahhaahhahhahhahahaha\"\n            }\n            res = Http.HttpUtils.post_transfers(networkCode,symbol,PublicKeys,from_add,to_add,amount,transactionParams)\n            assert res[0].status_code == 200\n    \n        signatures = []\n        for i in range(len(res[5])):\n            signature = Conf.Config.sign(privatekey[0],res[5][i]['hash'])\n            signatures.append(\n                {\n                \"hash\":res[5][i]['hash'],\n                \"publickey\":PublicKeys[0],\n                \"signature\":signature\n            }\n            )\n    \n        with allure.step(\"签名交易——sign\"):\n            sig = Http.HttpUtils.post_sign_transfers(res[1],res[2],res[3],res[4],res[5],res[6],signatures)\n            assert sig.status_code == 200\n    \n        with allure.step(\"广播交易——send\"):\n            send = Http.HttpUtils.post_send_transfers(res[3])\n            assert send.status_code == 200\n    \n        with allure.step(\"查询关联交易记录——balance-transactions by hash\"):\n            # 循环查10次关联交易记录\n            for i in range(10):\n                sleep(20)\n                logger.info(\"<----查询次数:第\" + str(i+1) + \"次---->\")\n                transcations = Http.HttpUtils.get_transactions_byhash(send.json()[\"hash\"])\n                assert transcations.status_code == 200\n                if (len(transcations.json()) > 0):\n                    break\n    \n            if (from_add == to_add):\n                assert len(transcations.json()) == 1 # 自己转自己一条交易记录\n                assert transcations.json()[0][\"type\"] == -1 # type 是 -1\n                assert transcations.json()[0][\"address\"] == res[0].json()[\"from\"] # address 是转出地址\n                # assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"] + (send.json()[\"hash\"])/(10^8)\n            else:\n>               assert len(transcations.json()) == 2\nE               assert 0 == 2\nE                +  where 0 = len([])\nE                +    where [] = <bound method Response.json of <Response [200]>>()\nE                +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\nTestcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py:68: AssertionError"}, "steps": [{"name": "构建交易——transfers", "status": "passed", "start": 1657165348352, "stop": 1657165349343}, {"name": "签名交易——sign", "status": "passed", "start": 1657165349344, "stop": 1657165350169}, {"name": "广播交易——send", "status": "passed", "start": 1657165350169, "stop": 1657165350501}, {"name": "查询关联交易记录——balance-transactions by hash", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py\", line 68, in test_transfers_address\n    assert len(transcations.json()) == 2\n"}, "start": 1657165350501, "stop": 1657165553961}], "attachments": [{"name": "log", "source": "16d6ef6e-bc42-483f-9862-f8cb25ebd8a6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常转账!'"}, {"name": "privatekey", "value": "['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']"}, {"name": "PublicKeys", "value": "['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']"}, {"name": "networkCode", "value": "'BTC'"}, {"name": "symbol", "value": "'BTC'"}, {"name": "from_add", "value": "'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'"}, {"name": "to_add", "value": "'tb1qdy5m3m7fxdgup3hu5rmh4kg5llctp3ck6sewv7'"}, {"name": "amount", "value": "'0.000009'"}], "start": 1657165348352, "stop": 1657165553970, "uuid": "5af96cfb-f47f-4fa1-bd8c-7f0e2843cb73", "historyId": "3e6e2d6a31bb70e2f23d86bf134e0229", "testCaseId": "54e2ccf5246b3afefb7084411cd582ac", "fullName": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc.Test_transfers_success_btc#test_transfers_address", "labels": [{"name": "feature", "value": "Transfers_Success!"}, {"name": "story", "value": "Transfers_BTC_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Transfers.Test_Transfers_BTC"}, {"name": "suite", "value": "test_transfers_success_btc"}, {"name": "subSuite", "value": "Test_transfers_success_btc"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "29233-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc"}]}