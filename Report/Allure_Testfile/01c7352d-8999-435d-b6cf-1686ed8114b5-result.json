{"name": "单签账户转账-正常转账maximum!", "status": "failed", "statusDetails": {"message": "AssertionError: assert '0.099136321998917474' == 'maximum'\n  - maximum\n  + 0.099136321998917474", "trace": "self = <test_transfers_success_eth.Test_transfers_success_eth object at 0x10926deb0>\ntest_title = '正常转账maximum!'\nprivatekey = ['ae0f28a2d98211ea6f656ecffa8a821235f78354921d63346c6be48a52610187']\nPublicKeys = ['0331e3ab5059c28098131d50856a99fcf40bea39b61f08ea55e1f35fbed131d2c0']\nnetworkCode = 'ETH-RINKEBY', symbol = 'ETH'\nfrom_add = '0xbDb3bd7b3F3DAEADC58D00EF5f15ED9a476B8fe3'\nto_add = '0x6146ca4fc34aaA7a6f9D0417a9A4f10e41b6a7Be', amount = 'maximum'\n\n    @allure.story(\"Transfers_ETH_Success!\")\n    @allure.title('单签账户转账-{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_transfers_address(self,test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——transfers\"):\n            transactionParams = {\n                \"memo\":\"hahahhahahhahahhaahhahhahhahahaha@@==这是一段描述！！====@@hahahhahahhahahhaahhahhahhahahaha\"\n            }\n            res = Http.HttpUtils.post_transfers(networkCode,symbol,PublicKeys,from_add,to_add,amount,transactionParams)\n            assert res[0].status_code == 200\n    \n        signature = Conf.Config.sign(privatekey[0],res[5][0]['hash'])\n        signatures = [\n            {\n                \"hash\":res[5][0]['hash'],\n                \"publickey\":res[5][0]['publicKeys'][0],\n                \"signature\":signature\n            }\n        ]\n    \n        with allure.step(\"签名交易——sign\"):\n            sig = Http.HttpUtils.post_sign_transfers(res[1],res[2],res[3],res[4],res[5],res[6],signatures)\n            assert sig.status_code == 200\n    \n        with allure.step(\"广播交易——send\"):\n            send = Http.HttpUtils.post_send_transfers(res[3])\n            assert send.status_code == 200\n    \n        with allure.step(\"查询交易记录——transfers by id,交易状态变为:1\"):\n            # 循环查10次交易记录\n            for i in range(10):\n                sleep(20)\n                logger.info(\"<----查询次数:第\" + str(i+1) + \"次---->\")\n                transfers = Http.HttpUtils.get_transactions_byid(res[8])\n                if (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"PENDING\"):\n                    assert transfers.json()[\"status\"] == -1\n                elif (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SENT\"):\n                    assert transfers.json()[\"status\"] == -1\n                elif (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SETTLED\"):\n                    assert transfers.json()[\"status\"] == 1\n                    break\n    \n        with allure.step(\"查询关联交易记录——balance-transactions by hash\"):\n            sleep(15)\n            transcations = Http.HttpUtils.get_transactions_byhash(send.json()[\"hash\"])\n            assert transcations.status_code == 200\n    \n    \n            if (from_add == to_add):\n                assert len(transcations.json()) == 1 # 自己转自己一条交易记录\n                assert transcations.json()[0][\"type\"] == -1 # type 是 -1\n                assert transcations.json()[0][\"address\"] == res[0].json()[\"from\"] # address 是转出地址\n                # assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"] + Conf.Config.amount_decimals(send.json()['estimatedFee'],18)\n            else:\n                assert len(transcations.json()) == 2\n                if(transcations.json()[0][\"type\"] == -1): # 判断第一个交易为转出地址\n                    assert transcations.json()[0][\"address\"] == res[0].json()[\"from\"]\n                    # assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"] + Conf.Config.amount_decimals(send.json()['estimatedFee'],18)\n    \n                    assert transcations.json()[1][\"address\"] == res[0].json()[\"to\"]\n                    assert transcations.json()[1][\"amount\"] ==  res[0].json()[\"amount\"]\n    \n                else:\n                    assert transcations.json()[0][\"address\"] == res[0].json()[\"to\"]\n>                   assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"]\nE                   AssertionError: assert '0.099136321998917474' == 'maximum'\nE                     - maximum\nE                     + 0.099136321998917474\n\nTestcase/Test_Transfers/Test_Transfers_ETH/test_transfers_success_eth.py:88: AssertionError"}, "steps": [{"name": "构建交易——transfers", "status": "passed", "start": 1657266636090, "stop": 1657266637809}, {"name": "签名交易——sign", "status": "passed", "start": 1657266637809, "stop": 1657266638148}, {"name": "广播交易——send", "status": "passed", "start": 1657266638148, "stop": 1657266639248}, {"name": "查询交易记录——transfers by id,交易状态变为:1", "status": "passed", "start": 1657266639248, "stop": 1657266680330}, {"name": "查询关联交易记录——balance-transactions by hash", "status": "failed", "statusDetails": {"message": "AssertionError: assert '0.099136321998917474' == 'maximum'\n  - maximum\n  + 0.099136321998917474\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Transfers/Test_Transfers_ETH/test_transfers_success_eth.py\", line 88, in test_transfers_address\n    assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"]\n"}, "start": 1657266680330, "stop": 1657266695973}], "attachments": [{"name": "log", "source": "e276cc81-5fbc-44e4-8530-e723a3fcd95e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常转账maximum!'"}, {"name": "privatekey", "value": "['ae0f28a2d98211ea6f656ecffa8a821235f78354921d63346c6be48a52610187']"}, {"name": "PublicKeys", "value": "['0331e3ab5059c28098131d50856a99fcf40bea39b61f08ea55e1f35fbed131d2c0']"}, {"name": "networkCode", "value": "'ETH-RINKEBY'"}, {"name": "symbol", "value": "'ETH'"}, {"name": "from_add", "value": "'0xbDb3bd7b3F3DAEADC58D00EF5f15ED9a476B8fe3'"}, {"name": "to_add", "value": "'0x6146ca4fc34aaA7a6f9D0417a9A4f10e41b6a7Be'"}, {"name": "amount", "value": "'maximum'"}], "start": 1657266636090, "stop": 1657266695975, "uuid": "7d3b8de6-8fa7-498f-86cd-0d17856537fa", "historyId": "963b2236f0117bdc6d3e754b36511e04", "testCaseId": "09737234902a3b87ef8eafa1a583ddda", "fullName": "Testcase.Test_Transfers.Test_Transfers_ETH.test_transfers_success_eth.Test_transfers_success_eth#test_transfers_address", "labels": [{"name": "story", "value": "Transfers_ETH_Success!"}, {"name": "feature", "value": "Transfers_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Transfers.Test_Transfers_ETH"}, {"name": "suite", "value": "test_transfers_success_eth"}, {"name": "subSuite", "value": "Test_transfers_success_eth"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "39039-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Transfers.Test_Transfers_ETH.test_transfers_success_eth"}]}