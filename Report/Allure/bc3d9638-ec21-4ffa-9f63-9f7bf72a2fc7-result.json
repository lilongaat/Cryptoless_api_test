{"name": "GOERLI safe账户转账 erc20coin", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'balance' referenced before assignment", "trace": "self = <test_success.Test_transfers_success object at 0x11102c550>, test_title = 'GOERLI safe账户转账 erc20coin'\nnetworkCode = 'GOERLI', symbol = 'USDCC'\nprivatekey = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\nfrom_add = '0x9D055026eB8D83eF561D5D8084F2DD02e7AD2C17', to_add = '0xa7a9e710f9a3b4184d4f8b7d379cec262f2382c2'\namount = '0.00123'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n>           balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/test_success.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnetworkCode = 'GOERLI', address = '0x9D055026eB8D83eF561D5D8084F2DD02e7AD2C17', symbol = 'USDCC'\n\n    @staticmethod\n    def query(networkCode:str, address:str, symbol=\"USDC\"):\n        if networkCode == \"BTC\":\n            if env_type == 0:\n                response = BTC_Test.balance(address)\n                assert response.status_code == 200\n                balance = (Decimal(response.json()[\"chain_stats\"][\"funded_txo_sum\"]) - Decimal(response.json()[\"chain_stats\"][\"spent_txo_sum\"]))/Decimal(10**8)\n            else:\n                pass\n        elif networkCode == \"DOGE\":\n            response = DOGE.balance(address)\n            assert response.status_code == 200\n            balance = Decimal(str(response.json()))\n        elif networkCode == \"ETH\":\n            pass\n        elif networkCode == \"GOERLI\":\n            if symbol == \"GoerliETH\":\n                response = GOERLI.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(str(response.json()[\"result\"]))/Decimal(10**18)\n        elif networkCode == \"BSC\":\n            if symbol == \"BNB\":\n                response = BSC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = BSC.balance_erc20(address,\"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n        elif networkCode == \"MATIC\":\n            if symbol == \"MATIC\":\n                response = MATIC.balance(address)\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**18)\n            else:\n                response = MATIC.balance_erc20(address,\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\")\n                assert response.status_code == 200\n                balance = Decimal(response.json()[\"result\"])/Decimal(10**6)\n        elif networkCode == \"ATOM\":\n            response = ATOM.balance(address)\n            assert response.status_code == 200\n            balance_ = [b.get(\"amount\") for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uatom\"]\n            balance = (Decimal(int(balance_[0]))/Decimal(10**6))\n        elif networkCode == \"IRIS\":\n            response = IRIS.balance(address)\n            assert response.status_code == 200\n            balance_detail = [b for b in response.json()[\"balances\"] if b.get(\"denom\") == \"uiris\"][0]\n            balance = Decimal(balance_detail[\"amount\"])/Decimal(10**6)\n        elif networkCode == \"CLV\":\n            if env_type == 1:\n                response = CLV.balance(address)\n                assert response.status_code == 200\n                balance_detail = [b for b in response.json()[\"data\"][\"native\"] if b.get(\"symbol\") == \"CLV\"][0]\n                balance = (Decimal(balance_detail[\"balance\"]) - Decimal(balance_detail[\"lock\"]) - Decimal(balance_detail[\"reserved\"]))/Decimal(10**18)\n            elif env_type == 0:\n                pass\n        else:\n            raise Exception(\"networkCode No support\")\n>       return balance\nE       UnboundLocalError: local variable 'balance' referenced before assignment\n\nCommon/Httpexplore.py:512: UnboundLocalError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'balance' referenced before assignment\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Safe/test_success.py\", line 75, in test_custodial\n    balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n  File \"/Users/lilong/Documents/Test_Api/Common/Httpexplore.py\", line 512, in query\n    return balance\n"}, "start": 1672993010497, "stop": 1672993010497}], "parameters": [{"name": "test_title", "value": "'GOERLI safe账户转账 erc20coin'"}, {"name": "networkCode", "value": "'GOERLI'"}, {"name": "symbol", "value": "'USDCC'"}, {"name": "privatekey", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "from_add", "value": "'0x9D055026eB8D83eF561D5D8084F2DD02e7AD2C17'"}, {"name": "to_add", "value": "'0xa7a9e710f9a3b4184d4f8b7d379cec262f2382c2'"}, {"name": "amount", "value": "'0.00123'"}], "start": 1672993010497, "stop": 1672993010499, "uuid": "777d809e-fcb7-4b5a-ae1e-5acd0e705071", "historyId": "af0a03265acb5b352c26e311693c44e0", "testCaseId": "7cb3b18117425d778a8f4e38cad1766c", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "15893-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_success"}]}