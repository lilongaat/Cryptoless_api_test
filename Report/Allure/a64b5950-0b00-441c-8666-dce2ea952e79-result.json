{"name": "MATIC创建多签账户并激活", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <test_create_active.Test_account_success object at 0x107df8610>, test_title = 'MATIC创建多签账户并激活', networkCode = 'MATIC'\npublickey = '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9', threshold = '2'\nprivatekey_send = 'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'\npublickey_send = '0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', sendaddress = '0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'\n\n    @allure.story(\"Account Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,publickey,threshold,privatekey_send,publickey_send,sendaddress,', test_data)\n    def test_custodial(self,test_title,networkCode,publickey,threshold,privatekey_send,publickey_send,sendaddress):\n    \n        with allure.step(\"创建多签账户\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"publicKeys\":publickey,\n                \"threshold\":threshold\n            }\n            safeacc = Httpcore.HttpCoreUtils.core_create_account(body)\n            assert safeacc.status_code == 200\n            safeaddress = safeacc.json()[\"address\"]\n    \n        with allure.step(\"Build交易\"):\n            body = {\n                    \"networkCode\": networkCode,\n                    \"payload\": {\n                        \"from\": sendaddress,\n                        \"to\":safeaddress,\n                        \"value\":\"0x\"\n                        },\n                    \"type\": \"SAFE_CREATION_TRANSACTION\"\n                }\n    \n            ts = Httpcore.HttpCoreUtils.core_build(body)\n            assert ts.status_code == 200\n            id = ts.json()[\"id\"]\n            requiredSignings = ts.json()[\"requiredSignings\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                for j in range(len(requiredSignings[i][\"publicKeys\"])):\n                    publickey = requiredSignings[i][\"publicKeys\"][j]\n                    signature = {\n                        \"hash\":hash,\n                        \"publicKey\":publickey,\n                        \"signature\":Conf.Config.sign(privatekey_send,hash)\n    \n                    }\n                    signatures.append(signature)\n    \n        with allure.step(\"Sign交易\"):\n            sign = Httpcore.HttpCoreUtils.core_sign(id,signatures)\n>           assert sign.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nTestcasecore/Test_Accounts/Test_EVM/Test_Safe_Account/test_create_active.py:74: AssertionError"}, "steps": [{"name": "创建多签账户", "status": "passed", "start": 1669875202308, "stop": 1669875202953}, {"name": "Build交易", "status": "passed", "start": 1669875202953, "stop": 1669875205104}, {"name": "Sign交易", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcasecore/Test_Accounts/Test_EVM/Test_Safe_Account/test_create_active.py\", line 74, in test_custodial\n    assert sign.status_code == 200\n"}, "start": 1669875205104, "stop": 1669875205300}], "attachments": [{"name": "log", "source": "09223e65-f38c-4f6d-9ca5-690ee3012225-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'MATIC创建多签账户并激活'"}, {"name": "networkCode", "value": "'MATIC'"}, {"name": "publickey", "value": "['0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113', '03c420167aaf4fc7106646b2fe485519e5569ceb1584ae31d62537e349a4e4b5a9']"}, {"name": "threshold", "value": "'2'"}, {"name": "privatekey_send", "value": "'dca5feaaf2296dca296a015b0ce26d82f89ab8d0f77ec98901a77e96f6e2e2da'"}, {"name": "publickey_send", "value": "'0244fb46bba2e912f26a73126b89742ed7f521f593ee084953ae008172553a0113'"}, {"name": "sendaddress", "value": "'0xe525E7cd17f6Dc950492755A089E452fd5d9d44f'"}], "start": 1669875202308, "stop": 1669875205301, "uuid": "fbbf6312-3fe1-4e74-b6bd-da6921679a49", "historyId": "8512aca30bac6b58ada29f521864605f", "testCaseId": "42ea865116b0b80e3656812589619763", "fullName": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account.test_create_active.Test_account_success#test_custodial", "labels": [{"name": "feature", "value": "Account Success!"}, {"name": "story", "value": "Account Success!"}, {"name": "parentSuite", "value": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account"}, {"name": "suite", "value": "test_create_active"}, {"name": "subSuite", "value": "Test_account_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "48663-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcasecore.Test_Accounts.Test_EVM.Test_Safe_Account.test_create_active"}]}