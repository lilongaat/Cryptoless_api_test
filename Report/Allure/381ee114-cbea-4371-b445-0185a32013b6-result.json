{"name": "查询账户余额-0x0e37Be2E43571de1E723241b70cEab25d991E965", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <test_ob_account_GOERLI.Test_accounts_balances object at 0x10efc9fd0>\naddress = '0x0e37Be2E43571de1E723241b70cEab25d991E965'\n\n    @allure.story(\"GOERLI address(Top-10) Balances Check!\")\n    @allure.title('查询账户余额-{address}')\n    @pytest.mark.parametrize('address', accounts)\n    def test_account_balance(self, address):\n    \n        with allure.step(\"Graphql查询地址余额\"):\n            graphql = Graphql.Graphql.getAccountByAddress(\"GOERLI\",address,\"goerliETH\")\n            assert graphql.status_code == 200\n>           amount = Decimal(graphql.json()[\"data\"][\"getAccountByAddress\"][\"amount\"])/Decimal(10**18)\nE           TypeError: 'NoneType' object is not subscriptable\n\nTestcase/Test_Top_Holders_Check/Test_obaccount_holder.py/test_ob_account_GOERLI.py:41: TypeError"}, "steps": [{"name": "Graphql查询地址余额", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Top_Holders_Check/Test_obaccount_holder.py/test_ob_account_GOERLI.py\", line 41, in test_account_balance\n    amount = Decimal(graphql.json()[\"data\"][\"getAccountByAddress\"][\"amount\"])/Decimal(10**18)\n"}, "start": 1671099707666, "stop": 1671099707881}], "attachments": [{"name": "log", "source": "b03c355d-3899-4623-a95d-629c4d9198c7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "address", "value": "'0x0e37Be2E43571de1E723241b70cEab25d991E965'"}], "start": 1671099707666, "stop": 1671099707882, "uuid": "96d25355-82b2-4c23-87a2-8d30e8a90f8e", "historyId": "5f58377f858e65c4dc28ccf50ea49263", "testCaseId": "5df3c4f8220131c67d0a6d4281932b60", "fullName": "Testcase.Test_Top_Holders_Check.Test_obaccount_holder.py.test_ob_account_GOERLI.Test_accounts_balances#test_account_balance", "labels": [{"name": "story", "value": "GOERLI address(Top-10) Balances Check!"}, {"name": "feature", "value": "Accounts Balances!"}, {"name": "parentSuite", "value": "Testcase.Test_Top_Holders_Check.Test_obaccount_holder.py"}, {"name": "suite", "value": "test_ob_account_GOERLI"}, {"name": "subSuite", "value": "Test_accounts_balances"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "10550-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Top_Holders_Check.Test_obaccount_holder.py.test_ob_account_GOERLI"}]}