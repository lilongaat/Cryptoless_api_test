{"name": "External账户IRIS质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'PENDING'\n  - PENDING\n  + SIGNED", "trace": "self = <test_success_sc.Test_stake_success object at 0x10fb98760>, test_title = 'External账户IRIS质押'\nprivatekey = ['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b'], networkCode = 'IRIS', symbol = 'IRIS', type = 'stake'\naddress = 'iaa1ed68xf6453t7u4ttsmphdrwqflx2l90e6ymuaq', amount = '0.0004'\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,privatekey,networkCode,symbol,type,address,amount):\n    \n        with allure.step(\"查询账户holders信息\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                }\n            else:\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n            assert stake.status_code == 200\n            assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"BUILDING\"\n    \n            id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = stake.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = stake.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——instructions\"):\n            sign = Http.HttpUtils.sign(id,signatures,serialized)\n            assert sign.status_code == 200\n>           assert sign.json()[\"status\"] == \"PENDING\"\nE           AssertionError: assert 'SIGNED' == 'PENDING'\nE             - PENDING\nE             + SIGNED\n\nTestcase/Test_Instructions/Test_Stake/Test_External/test_success_sc.py:95: AssertionError"}, "steps": [{"name": "查询账户holders信息", "status": "passed", "start": 1668074295969, "stop": 1668074296601}, {"name": "查询账户staking信息", "status": "passed", "start": 1668074296601, "stop": 1668074298611}, {"name": "构建交易——instructions", "status": "passed", "start": 1668074298611, "stop": 1668074301106}, {"name": "签名交易——instructions", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'PENDING'\n  - PENDING\n  + SIGNED\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_External/test_success_sc.py\", line 95, in test_custodial\n    assert sign.json()[\"status\"] == \"PENDING\"\n"}, "start": 1668074301106, "stop": 1668074301456}], "attachments": [{"name": "log", "source": "ef867a6b-eb3b-448b-8f60-498af91032db-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'External账户IRIS质押'"}, {"name": "privatekey", "value": "['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b']"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'iaa1ed68xf6453t7u4ttsmphdrwqflx2l90e6ymuaq'"}, {"name": "amount", "value": "'0.0004'"}], "start": 1668074295969, "stop": 1668074301457, "uuid": "cf644d69-8603-4ca1-9d86-78f9aed494e6", "historyId": "3cf76c274d52c48556b6800a024789f8", "testCaseId": "75c731cb8a5bfbf191104fa823a7a95b", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_External.test_success_sc.Test_stake_success#test_custodial", "labels": [{"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "feature", "value": "Stake_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_External"}, {"name": "suite", "value": "test_success_sc"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "20170-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_External.test_success_sc"}]}