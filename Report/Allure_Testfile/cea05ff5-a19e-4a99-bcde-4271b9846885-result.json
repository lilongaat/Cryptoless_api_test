{"name": "单签账户转账-正常转账!", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 1\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_transfers_success_btc.Test_transfers_success_btc object at 0x1104408b0>\ntest_title = '正常转账!'\nprivatekey = ['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']\nPublicKeys = ['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']\nnetworkCode = 'BTC', symbol = 'BTC'\nfrom_add = 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'\nto_add = 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', amount = '0.06'\n\n    @allure.story(\"Transfers_BTC_Success!\")\n    @allure.title('单签账户转账-{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_transfers_address(self,test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——transfers\"):\n            res = Http.HttpUtils.post_transfers(networkCode,symbol,PublicKeys,from_add,to_add,amount)\n            assert res[0].status_code == 200\n    \n        signatures = []\n        for i in range(len(res[5])):\n            signature = Conf.Config.sign(privatekey[0],res[5][i]['hash'])\n            logger.info(signature)\n            signatures.append(\n                {\n                \"hash\":res[5][i]['hash'],\n                \"publickey\":PublicKeys[0],\n                \"signature\":signature\n            }\n            )\n    \n        with allure.step(\"签名交易——sign\"):\n            sig = Http.HttpUtils.post_sign_transfers(res[1],res[2],res[3],res[4],res[5],res[6],signatures)\n            assert sig.status_code == 200\n    \n        with allure.step(\"广播交易——send\"):\n            send = Http.HttpUtils.post_send_transfers(res[3])\n            assert send.status_code == 200\n    \n        with allure.step(\"查询关联交易记录——balance-transactions by hash\"):\n            sleep(20)\n            hash = send.json()[\"hash\"]\n            transcations = Http.HttpUtils.get_transactions_byhash(hash)\n            assert transcations.status_code == 200\n    \n            # BTC自己转自己一条交易记录\n            if (from_add == to_add):\n>               assert len(transcations.json()) == 1\nE               assert 0 == 1\nE                +  where 0 = len([])\nE                +    where [] = <bound method Response.json of <Response [200]>>()\nE                +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\nTestcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py:57: AssertionError"}, "steps": [{"name": "构建交易——transfers", "status": "passed", "start": 1657086960575, "stop": 1657086961425}, {"name": "签名交易——sign", "status": "passed", "start": 1657086961426, "stop": 1657086962565}, {"name": "广播交易——send", "status": "passed", "start": 1657086962565, "stop": 1657086962880}, {"name": "查询关联交易记录——balance-transactions by hash", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 1\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py\", line 57, in test_transfers_address\n    assert len(transcations.json()) == 1\n"}, "start": 1657086962880, "stop": 1657086983457}], "attachments": [{"name": "log", "source": "c7133277-33a4-40c7-be81-eaf31941ac87-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常转账!'"}, {"name": "privatekey", "value": "['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']"}, {"name": "PublicKeys", "value": "['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']"}, {"name": "networkCode", "value": "'BTC'"}, {"name": "symbol", "value": "'BTC'"}, {"name": "from_add", "value": "'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'"}, {"name": "to_add", "value": "'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'"}, {"name": "amount", "value": "'0.06'"}], "start": 1657086960575, "stop": 1657086983461, "uuid": "8820c0b0-1690-47f2-9d82-5c878dea4c29", "historyId": "041c534b9cb46fb1f25c01f05dec8fe5", "testCaseId": "54e2ccf5246b3afefb7084411cd582ac", "fullName": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc.Test_transfers_success_btc#test_transfers_address", "labels": [{"name": "story", "value": "Transfers_BTC_Success!"}, {"name": "feature", "value": "Transfers_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Transfers.Test_Transfers_BTC"}, {"name": "suite", "value": "test_transfers_success_btc"}, {"name": "subSuite", "value": "Test_transfers_success_btc"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "20602-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc"}]}