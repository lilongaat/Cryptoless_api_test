{"name": "BSC safe账户转账nativecoin", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.00222795') == Decimal('0.004')", "trace": "self = <test_success.Test_transfers_success object at 0x107896550>, test_title = 'BSC safe账户转账nativecoin'\nnetworkCode = 'BSC', symbol = 'BNB', privatekey = '100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'\nfrom_add = '0x49624761fca25f4782f88dc67aac8e8a48f54411', to_add = '0x3d7f18Ad2cEa9B59E54dFAf09b327C1CCd899591'\namount = '0.0000014'\n\n    @allure.story(\"Custodial Transfers Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,networkCode,symbol,privatekey,from_add,to_add,amount', test_data)\n    def test_custodial(self,test_title,networkCode,symbol,privatekey,from_add,to_add,amount):\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n            assert balance == quantity\n    \n        with allure.step(\"构建交易——instructions\"):\n            body = {\n                \"networkCode\":networkCode,\n                \"type\":\"transfer\",\n                \"body\":{\n                    \"from\":from_add,\n                    \"to\":to_add,\n                    \"symbol\":symbol,\n                    \"amount\":amount\n                },\n                \"transactionParams\":{\n                    \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n                }\n            }\n            transfer = Http.HttpUtils.instructions(body)\n            assert transfer.status_code == 200\n            # assert transfer.json()[\"_embedded\"][\"transactions\"][0][\"statusDesc\"] == \"SIGNING\"\n    \n            id = transfer.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = transfer.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey,hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易\"):\n            sign  =Http.HttpUtils.sign(id,signatures)\n            assert sign.status_code == 200\n    \n        with allure.step(\"广播交易\"):\n            send = Http.HttpUtils.send(id)\n            assert send.status_code == 200\n            assert send.json()[\"statusDesc\"] == \"PENDING\"\n    \n            hash = send.json()[\"hash\"]\n    \n    \n        # logger.error(\"\\n\\n\"+networkCode+\"--\"+symbol+\"--\"+test_title+\"\\n\"+from_add+\"--\"+quantity+\"\\n\"+hash+\"\\n\\n\")\n    \n        with allure.step(\"通过id查询交易记录\"):\n            sleep(30)\n            for n in range(10):\n                transaction = Http.HttpUtils.transactions_byid(id)\n                assert transaction.status_code == 200\n                statusDesc = transaction.json()[\"statusDesc\"]\n                if statusDesc == \"SETTLED\" and len(transaction.json()[\"balanceChanges\"]) > 0:\n                    break\n                else:\n                    sleep(30)\n            sleep(5)\n    \n        with allure.step(\"浏览器查询from账户balance信息\"):\n            balance = Httpexplore.Balances_explore.query(networkCode,from_add,symbol)\n    \n        with allure.step(\"查询from账户holder信息\"):\n            holder = Http.HttpUtils.holders(networkCode=networkCode,symbol=symbol,address=from_add)\n            assert holder.status_code ==200\n            quantity = Decimal(holder.json()[\"list\"][0][\"quantity\"])\n    \n        logger.debug(\"浏览器查询账户balance为:\" + str(balance))\n        logger.debug(\"查询账户holder为:\" + str(quantity))\n    \n        with allure.step(\"账户余额相等验证 浏览器查询==holder\"):\n>           assert balance == quantity\nE           AssertionError: assert Decimal('0.00222795') == Decimal('0.004')\n\nTestcase/Test_Cloud/Test_Transfer/Test_Safe/test_success.py:154: AssertionError"}, "steps": [{"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672903353998, "stop": 1672903356066}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672903356066, "stop": 1672903356164}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "passed", "start": 1672903356165, "stop": 1672903356165}, {"name": "构建交易——instructions", "status": "passed", "start": 1672903356165, "stop": 1672903358003}, {"name": "签名交易", "status": "passed", "start": 1672903358003, "stop": 1672903359328}, {"name": "广播交易", "status": "passed", "start": 1672903359328, "stop": 1672903360477}, {"name": "通过id查询交易记录", "status": "passed", "start": 1672903360477, "stop": 1672903696713}, {"name": "浏览器查询from账户balance信息", "status": "passed", "start": 1672903696713, "stop": 1672903699391}, {"name": "查询from账户holder信息", "status": "passed", "start": 1672903699391, "stop": 1672903699624}, {"name": "账户余额相等验证 浏览器查询==holder", "status": "failed", "statusDetails": {"message": "AssertionError: assert Decimal('0.00222795') == Decimal('0.004')\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Cloud/Test_Transfer/Test_Safe/test_success.py\", line 154, in test_custodial\n    assert balance == quantity\n"}, "start": 1672903699625, "stop": 1672903699625}], "attachments": [{"name": "log", "source": "40570892-0857-477b-b0e0-e7117defb150-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'BSC safe账户转账nativecoin'"}, {"name": "networkCode", "value": "'BSC'"}, {"name": "symbol", "value": "'BNB'"}, {"name": "privatekey", "value": "'100e876b446ee8a356cf2fa8082e12d8b5ff6792aa8fac7a01b534163cbefc33'"}, {"name": "from_add", "value": "'0x49624761fca25f4782f88dc67aac8e8a48f54411'"}, {"name": "to_add", "value": "'0x3d7f18Ad2cEa9B59E54dFAf09b327C1CCd899591'"}, {"name": "amount", "value": "'0.0000014'"}], "start": 1672903353997, "stop": 1672903699630, "uuid": "d1481be7-a725-45e6-b2d8-ce18b4e1a5aa", "historyId": "8ba2199bad28e501914217ac52e58d39", "testCaseId": "7cb3b18117425d778a8f4e38cad1766c", "fullName": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_success.Test_transfers_success#test_custodial", "labels": [{"name": "story", "value": "Custodial Transfers Success!"}, {"name": "feature", "value": "Transfers Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_transfers_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "10027-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Cloud.Test_Transfer.Test_Safe.test_success"}]}