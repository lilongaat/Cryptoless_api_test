{"name": "Safe2-2账户IRIS质押", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'PENDING'\n  - PENDING\n  + SIGNED", "trace": "self = <test_success.Test_stake_success object at 0x105c04670>, test_title = 'Safe2-2账户IRIS质押'\nprivatekey = ['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b'], networkCode = 'IRIS', symbol = 'IRIS', type = 'stake'\naddress = 'iaa1x5m8vh53addgrdtnsxc07tryn46f9d7x4q3p40', amount = '0.0005'\n\n    @allure.story(\"Custodial_Stake_Success!\")\n    @allure.title('{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,networkCode,symbol,type,address,amount', test_data)\n    def test_custodial(self,test_title,privatekey,networkCode,symbol,type,address,amount):\n    \n        with allure.step(\"查询From账户holders信息——holders\"):\n            holders = Http.HttpUtils.get_holders(networkCode,symbol,address)\n            assert holders.status_code == 200\n    \n        with allure.step(\"查询账户staking信息\"):\n            staking = Http.HttpUtils.get_staking(networkCode,symbol,address)\n            assert staking.status_code == 200\n    \n        with allure.step(\"构建交易——instructions\"):\n            if type == \"claim\":\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                }\n            else:\n                body = {\n                    \"delegator\":address,\n                    \"coinSymbol\":symbol,\n                    \"amount\":amount\n                }\n            transactionParams = {\n                \"memo\":''.join(random.sample(string.ascii_letters + string.digits, 10))\n            }\n            stake = Http.HttpUtils.instructions(type,body,networkCode,[],transactionParams)\n    \n            assert stake.status_code == 200\n            assert stake.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"BUILDING\"\n    \n            id = stake.json()[\"_embedded\"][\"transactions\"][0][\"id\"]\n            requiredSignings = stake.json()[\"_embedded\"][\"transactions\"][0][\"requiredSignings\"]\n            serialized = stake.json()[\"_embedded\"][\"transactions\"][0][\"serialized\"]\n    \n            signatures = []\n            for i in range(len(requiredSignings)):\n                hash = requiredSignings[i][\"hash\"]\n                publickey = requiredSignings[i][\"publicKeys\"][0]\n                signature = {\n                    \"hash\":hash,\n                    \"publicKey\":publickey,\n                    \"signature\":Conf.Config.sign(privatekey[0],hash)\n    \n                }\n                signatures.append(signature)\n    \n        with allure.step(\"签名交易——sign\"):\n            sign = Http.HttpUtils.sign(id,signatures,serialized)\n            assert sign.status_code == 200\n>           assert sign.json()[\"status\"] == \"PENDING\"\nE           AssertionError: assert 'SIGNED' == 'PENDING'\nE             - PENDING\nE             + SIGNED\n\nTestcase/Test_Instructions/Test_Stake/Test_Safe/test_success.py:103: AssertionError"}, "steps": [{"name": "查询From账户holders信息——holders", "status": "passed", "start": 1668077528171, "stop": 1668077528585}, {"name": "查询账户staking信息", "status": "passed", "start": 1668077528585, "stop": 1668077529199}, {"name": "构建交易——instructions", "status": "passed", "start": 1668077529199, "stop": 1668077531351}, {"name": "签名交易——sign", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'SIGNED' == 'PENDING'\n  - PENDING\n  + SIGNED\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Instructions/Test_Stake/Test_Safe/test_success.py\", line 103, in test_custodial\n    assert sign.json()[\"status\"] == \"PENDING\"\n"}, "start": 1668077531351, "stop": 1668077534428}], "attachments": [{"name": "log", "source": "d33aaa9d-a6e6-46ec-8d27-c655a6561d54-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'Safe2-2账户IRIS质押'"}, {"name": "privatekey", "value": "['d10003ebe2876bd53bf2bb2200eb873a089520a3395b63a4f04330c00e9a885b']"}, {"name": "networkCode", "value": "'IRIS'"}, {"name": "symbol", "value": "'IRIS'"}, {"name": "type", "value": "'stake'"}, {"name": "address", "value": "'iaa1x5m8vh53addgrdtnsxc07tryn46f9d7x4q3p40'"}, {"name": "amount", "value": "'0.0005'"}], "start": 1668077528171, "stop": 1668077534429, "uuid": "77862416-f7b7-4a91-b323-97b48bc9237d", "historyId": "98068b3cc29fcec37bd044c86cee91fe", "testCaseId": "fabd1d690204eba4479852c629b48510", "fullName": "Testcase.Test_Instructions.Test_Stake.Test_Safe.test_success.Test_stake_success#test_custodial", "labels": [{"name": "feature", "value": "Stake_Success!"}, {"name": "story", "value": "Custodial_Stake_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Instructions.Test_Stake.Test_Safe"}, {"name": "suite", "value": "test_success"}, {"name": "subSuite", "value": "Test_stake_success"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "21018-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Instructions.Test_Stake.Test_Safe.test_success"}]}