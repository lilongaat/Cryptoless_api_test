{"name": "单签账户转账-正常转账maximum!", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1 == 2\n +  where 1 = len([{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}])\n +    where [{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_transfers_success_btc.Test_transfers_success_btc object at 0x10951c940>\ntest_title = '正常转账maximum!'\nprivatekey = ['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']\nPublicKeys = ['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']\nnetworkCode = 'BTC', symbol = 'BTC'\nfrom_add = 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'\nto_add = 'tb1qxwtl4mmjrskgy4vtz6zcc8tkn8t6tv575mq6pf', amount = 'maximum'\n\n    @allure.story(\"Transfers_BTC_Success!\")\n    @allure.title('单签账户转账-{test_title}')\n    @pytest.mark.parametrize('test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount', test_data)\n    def test_transfers_address(self,test_title,privatekey,PublicKeys,networkCode,symbol,from_add,to_add,amount):\n    \n        with allure.step(\"构建交易——transfers\"):\n            transactionParams = {\n                \"memo\":\"hahahhahahhahahhaahhahhahhahahaha@@==这是一段描述！！====@@hahahhahahhahahhaahhahhahhahahaha\"\n            }\n            res = Http.HttpUtils.post_transfers(networkCode,symbol,PublicKeys,from_add,to_add,amount,transactionParams)\n            assert res[0].status_code == 200\n    \n        signatures = []\n        for i in range(len(res[5])):\n            signature = Conf.Config.sign(privatekey[0],res[5][i]['hash'])\n            signatures.append(\n                {\n                \"hash\":res[5][i]['hash'],\n                \"publickey\":PublicKeys[0],\n                \"signature\":signature\n            }\n            )\n    \n        with allure.step(\"签名交易——sign\"):\n            sig = Http.HttpUtils.post_sign_transfers(res[1],res[2],res[3],res[4],res[5],res[6],signatures)\n            assert sig.status_code == 200\n    \n        with allure.step(\"广播交易——send\"):\n            send = Http.HttpUtils.post_send_transfers(res[3])\n            assert send.status_code == 200\n    \n        with allure.step(\"查询交易记录——transfers by id,交易状态变为:1\"):\n            # 循环查10次交易记录\n            for i in range(10):\n                sleep(20)\n                logger.info(\"<----查询次数:第\" + str(i+1) + \"次---->\")\n                transfers = Http.HttpUtils.get_transactions_byid(res[8])\n                if (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"PENDING\"):\n                    assert transfers.json()[\"status\"] == -1\n                elif (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SENT\"):\n                    assert transfers.json()[\"status\"] == -1\n                elif (transfers.json()[\"_embedded\"][\"transactions\"][0][\"status\"] == \"SETTLED\"):\n                    assert transfers.json()[\"status\"] == 1\n                    break\n    \n        with allure.step(\"查询关联交易记录——balance-transactions by hash\"):\n            sleep(30)\n            transcations = Http.HttpUtils.get_transactions_byhash(send.json()[\"hash\"])\n            assert transcations.status_code == 200\n    \n            if (from_add == to_add):\n                assert len(transcations.json()) == 1 # 自己转自己一条交易记录\n                assert transcations.json()[0][\"type\"] == -1 # type 是 -1\n                assert transcations.json()[0][\"address\"] == res[0].json()[\"from\"] # address 是转出地址\n                # assert transcations.json()[0][\"amount\"] ==  res[0].json()[\"amount\"] + Conf.Config.amount_decimals(send.json()['estimatedFee'],8)\n            else:\n>               assert len(transcations.json()) == 2\nE               AssertionError: assert 1 == 2\nE                +  where 1 = len([{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}])\nE                +    where [{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}] = <bound method Response.json of <Response [200]>>()\nE                +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\nTestcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py:79: AssertionError"}, "steps": [{"name": "构建交易——transfers", "status": "passed", "start": 1657267007128, "stop": 1657267007972}, {"name": "签名交易——sign", "status": "passed", "start": 1657267007973, "stop": 1657267008816}, {"name": "广播交易——send", "status": "passed", "start": 1657267008816, "stop": 1657267009662}, {"name": "查询交易记录——transfers by id,交易状态变为:1", "status": "passed", "start": 1657267009662, "stop": 1657267156037}, {"name": "查询关联交易记录——balance-transactions by hash", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1 == 2\n +  where 1 = len([{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}])\n +    where [{'address': 'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun', 'amount': '0.00000153', 'blockHash': '0000000000000993d5817b1de8c40bac92d7b8c0c133604fc361782c53fb24a4', 'blockHeight': '2284672', ...}] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n", "trace": "  File \"/Users/lilong/Documents/Test_Api/Testcase/Test_Transfers/Test_Transfers_BTC/test_transfers_success_btc.py\", line 79, in test_transfers_address\n    assert len(transcations.json()) == 2\n"}, "start": 1657267156037, "stop": 1657267186846}], "attachments": [{"name": "log", "source": "947ca567-5058-48ec-a746-655d4feee3b6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_title", "value": "'正常转账maximum!'"}, {"name": "privatekey", "value": "['dd4e89dbb052b5ba7981c3353b24a0740f6bbc7bfffc20e4808ddb1d42bee65b']"}, {"name": "PublicKeys", "value": "['022bf595281b06dcb38c9261c5dfeb979ee63c79d47ad328bb8606f6b000d855ea']"}, {"name": "networkCode", "value": "'BTC'"}, {"name": "symbol", "value": "'BTC'"}, {"name": "from_add", "value": "'tb1qqrw8uz4j305w6fjr4mwng040sv7kz8hcczjfun'"}, {"name": "to_add", "value": "'tb1qxwtl4mmjrskgy4vtz6zcc8tkn8t6tv575mq6pf'"}, {"name": "amount", "value": "'maximum'"}], "start": 1657267007128, "stop": 1657267186849, "uuid": "5b53ef0d-382d-45a0-a952-5a8fdbbf840f", "historyId": "18c54c63923fc6b6762eea63e666e27f", "testCaseId": "54e2ccf5246b3afefb7084411cd582ac", "fullName": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc.Test_transfers_success_btc#test_transfers_address", "labels": [{"name": "feature", "value": "Transfers_Success!"}, {"name": "story", "value": "Transfers_BTC_Success!"}, {"name": "parentSuite", "value": "Testcase.Test_Transfers.Test_Transfers_BTC"}, {"name": "suite", "value": "test_transfers_success_btc"}, {"name": "subSuite", "value": "Test_transfers_success_btc"}, {"name": "host", "value": "lilongdeMacBook-Pro.local"}, {"name": "thread", "value": "39039-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcase.Test_Transfers.Test_Transfers_BTC.test_transfers_success_btc"}]}